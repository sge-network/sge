// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/rewards/reward.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardK_RewardTypeK int32

const (
	RewardK_REFERRAL  RewardK_RewardTypeK = 0
	RewardK_MARKETING RewardK_RewardTypeK = 1
)

var RewardK_RewardTypeK_name = map[int32]string{
	0: "REFERRAL",
	1: "MARKETING",
}

var RewardK_RewardTypeK_value = map[string]int32{
	"REFERRAL":  0,
	"MARKETING": 1,
}

func (x RewardK_RewardTypeK) String() string {
	return proto.EnumName(RewardK_RewardTypeK_name, int32(x))
}

func (RewardK_RewardTypeK) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d14c2edcf2d04f04, []int{0, 0}
}

// RewardK represents the awardees, types and amount
type RewardK struct {
	// creator is the bech32-encoded address.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	// incentive_uid is the external UID to identify the payout
	IncentiveUID string              `protobuf:"bytes,2,opt,name=incentive_uid,proto3" json:"incentive_uid"`
	Awardees     []*AwardeeK         `protobuf:"bytes,3,rep,name=awardees,proto3" json:"awardees,omitempty"`
	Meta         map[string]string   `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RewardType   RewardK_RewardTypeK `protobuf:"varint,5,opt,name=reward_type,json=rewardType,proto3,enum=sgenetwork.sge.reward.RewardK_RewardTypeK" json:"reward_type,omitempty"`
}

func (m *RewardK) Reset()      { *m = RewardK{} }
func (*RewardK) ProtoMessage() {}
func (*RewardK) Descriptor() ([]byte, []int) {
	return fileDescriptor_d14c2edcf2d04f04, []int{0}
}
func (m *RewardK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardK.Merge(m, src)
}
func (m *RewardK) XXX_Size() int {
	return m.Size()
}
func (m *RewardK) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardK.DiscardUnknown(m)
}

var xxx_messageInfo_RewardK proto.InternalMessageInfo

type AwardeeK struct {
	// creator is the bech32-encoded address of the awardee
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// amount is the amount being deposited to the awardee
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *AwardeeK) Reset()         { *m = AwardeeK{} }
func (m *AwardeeK) String() string { return proto.CompactTextString(m) }
func (*AwardeeK) ProtoMessage()    {}
func (*AwardeeK) Descriptor() ([]byte, []int) {
	return fileDescriptor_d14c2edcf2d04f04, []int{1}
}
func (m *AwardeeK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwardeeK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwardeeK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwardeeK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwardeeK.Merge(m, src)
}
func (m *AwardeeK) XXX_Size() int {
	return m.Size()
}
func (m *AwardeeK) XXX_DiscardUnknown() {
	xxx_messageInfo_AwardeeK.DiscardUnknown(m)
}

var xxx_messageInfo_AwardeeK proto.InternalMessageInfo

func (m *AwardeeK) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.reward.RewardK_RewardTypeK", RewardK_RewardTypeK_name, RewardK_RewardTypeK_value)
	proto.RegisterType((*RewardK)(nil), "sgenetwork.sge.reward.RewardK")
	proto.RegisterMapType((map[string]string)(nil), "sgenetwork.sge.reward.RewardK.MetaEntry")
	proto.RegisterType((*AwardeeK)(nil), "sgenetwork.sge.reward.AwardeeK")
}

func init() { proto.RegisterFile("sge/rewards/reward.proto", fileDescriptor_d14c2edcf2d04f04) }

var fileDescriptor_d14c2edcf2d04f04 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x6b, 0xdb, 0x40,
	0x14, 0xc7, 0xa5, 0xd8, 0x49, 0xec, 0xb3, 0x1d, 0xcc, 0x91, 0x82, 0xc8, 0xa0, 0x73, 0x35, 0x14,
	0x63, 0x1a, 0x09, 0xd2, 0xa1, 0xc5, 0x2d, 0x14, 0x87, 0xb8, 0xc1, 0xa8, 0xe9, 0x70, 0xa4, 0x14,
	0xba, 0x84, 0x8b, 0xf5, 0x50, 0x8d, 0x23, 0x9d, 0xb9, 0x3b, 0x27, 0xd5, 0x37, 0xe8, 0xd8, 0x6e,
	0x1d, 0xfd, 0x3d, 0xfa, 0x05, 0x32, 0x66, 0x2c, 0x1d, 0x44, 0xb1, 0x97, 0xd2, 0x31, 0x9f, 0xa0,
	0xe8, 0x24, 0x9b, 0x98, 0xb6, 0x64, 0x7a, 0xef, 0xf1, 0x7e, 0xff, 0xbf, 0x74, 0xff, 0x3b, 0x64,
	0xc9, 0x10, 0x3c, 0x01, 0x57, 0x4c, 0x04, 0xb2, 0xa8, 0xee, 0x44, 0x70, 0xc5, 0xf1, 0x03, 0x19,
	0x42, 0x0c, 0xea, 0x8a, 0x8b, 0xb1, 0x2b, 0x43, 0x70, 0xf3, 0xe5, 0xde, 0x6e, 0xc8, 0x43, 0xae,
	0x09, 0x2f, 0xeb, 0x72, 0xd8, 0xf9, 0x56, 0x42, 0xdb, 0x54, 0x03, 0x3e, 0x7e, 0x8c, 0xb6, 0x87,
	0x02, 0x98, 0xe2, 0xc2, 0x32, 0x5b, 0x66, 0xbb, 0x7a, 0x88, 0x6f, 0x53, 0xb2, 0x93, 0xb0, 0xe8,
	0xa2, 0xeb, 0x14, 0x0b, 0x87, 0x2e, 0x11, 0x7c, 0x8c, 0x1a, 0xa3, 0x78, 0x08, 0xb1, 0x1a, 0x5d,
	0xc2, 0xd9, 0x74, 0x14, 0x58, 0x1b, 0x5a, 0xf3, 0x70, 0x9e, 0x92, 0xfa, 0x60, 0xb9, 0x78, 0x3b,
	0x38, 0xfa, 0x9d, 0x92, 0x75, 0x90, 0xae, 0x8f, 0xf8, 0x39, 0xaa, 0xb0, 0xec, 0x07, 0x00, 0xa4,
	0x55, 0x6a, 0x95, 0xda, 0xb5, 0x03, 0xe2, 0xfe, 0xf3, 0x08, 0x6e, 0x2f, 0xc7, 0x7c, 0xba, 0x12,
	0xe0, 0x17, 0xa8, 0x1c, 0x81, 0x62, 0x56, 0x59, 0x0b, 0xdb, 0xff, 0x11, 0x16, 0x27, 0x74, 0x4f,
	0x40, 0xb1, 0x7e, 0xac, 0x44, 0x42, 0xb5, 0x0a, 0xfb, 0xa8, 0x96, 0x13, 0x67, 0x2a, 0x99, 0x80,
	0xb5, 0xd9, 0x32, 0xdb, 0x3b, 0x07, 0x9d, 0x7b, 0x4c, 0xf2, 0x7a, 0x9a, 0x4c, 0xc0, 0xa7, 0x48,
	0xac, 0x86, 0xbd, 0xa7, 0xa8, 0xba, 0xf2, 0xc7, 0x4d, 0x54, 0x1a, 0x43, 0x92, 0xe7, 0x48, 0xb3,
	0x16, 0xef, 0xa2, 0xcd, 0x4b, 0x76, 0x31, 0x85, 0x3c, 0x27, 0x9a, 0x0f, 0xdd, 0x8d, 0x67, 0xa6,
	0xd3, 0x41, 0xb5, 0x3b, 0x9e, 0xb8, 0x8e, 0x2a, 0xb4, 0xff, 0xaa, 0x4f, 0x69, 0xef, 0x75, 0xd3,
	0xc0, 0x0d, 0x54, 0x3d, 0xe9, 0x51, 0xbf, 0x7f, 0x3a, 0x78, 0x73, 0xdc, 0x34, 0xbb, 0xf5, 0x4f,
	0x33, 0x62, 0x7c, 0x9d, 0x11, 0xe3, 0xd7, 0x8c, 0x18, 0xce, 0x17, 0x13, 0x55, 0x96, 0xa1, 0x64,
	0xd7, 0xc7, 0x82, 0x40, 0x80, 0x94, 0x7f, 0x5f, 0x5f, 0xb1, 0x70, 0xe8, 0x12, 0xc1, 0xef, 0xd0,
	0x16, 0x8b, 0xf8, 0x34, 0x56, 0x56, 0x59, 0xc3, 0x2f, 0xaf, 0x53, 0x62, 0xfc, 0x48, 0xc9, 0xa3,
	0x70, 0xa4, 0x3e, 0x4c, 0xcf, 0xdd, 0x21, 0x8f, 0xbc, 0x21, 0x97, 0x11, 0x97, 0x45, 0xd9, 0x97,
	0xc1, 0xd8, 0xcb, 0x62, 0x92, 0xee, 0x20, 0x56, 0xb7, 0x29, 0x69, 0x14, 0xd6, 0xda, 0xc5, 0xa1,
	0x85, 0xdd, 0xe1, 0xd1, 0xf5, 0xdc, 0x36, 0x6f, 0xe6, 0xb6, 0xf9, 0x73, 0x6e, 0x9b, 0x9f, 0x17,
	0xb6, 0x71, 0xb3, 0xb0, 0x8d, 0xef, 0x0b, 0xdb, 0x78, 0xdf, 0xb9, 0x63, 0x2d, 0x43, 0xd8, 0x2f,
	0x32, 0xce, 0x7a, 0xef, 0xe3, 0xea, 0x2d, 0xeb, 0x4f, 0x9c, 0x6f, 0xe9, 0xe7, 0xf9, 0xe4, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x61, 0xf3, 0x0b, 0xe7, 0x02, 0x00, 0x00,
}

func (m *RewardK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardType != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Meta) > 0 {
		for k := range m.Meta {
			v := m.Meta[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintReward(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintReward(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReward(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Awardees) > 0 {
		for iNdEx := len(m.Awardees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Awardees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IncentiveUID) > 0 {
		i -= len(m.IncentiveUID)
		copy(dAtA[i:], m.IncentiveUID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.IncentiveUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AwardeeK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardeeK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwardeeK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.IncentiveUID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if len(m.Awardees) > 0 {
		for _, e := range m.Awardees {
			l = e.Size()
			n += 1 + l + sovReward(uint64(l))
		}
	}
	if len(m.Meta) > 0 {
		for k, v := range m.Meta {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovReward(uint64(len(k))) + 1 + len(v) + sovReward(uint64(len(v)))
			n += mapEntrySize + 1 + sovReward(uint64(mapEntrySize))
		}
	}
	if m.RewardType != 0 {
		n += 1 + sovReward(uint64(m.RewardType))
	}
	return n
}

func (m *AwardeeK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentiveUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awardees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awardees = append(m.Awardees, &AwardeeK{})
			if err := m.Awardees[len(m.Awardees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReward
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReward
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReward
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthReward
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthReward
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReward(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthReward
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Meta[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= RewardK_RewardTypeK(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardeeK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardeeK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardeeK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
