// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package marketv1beta

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_MarketAddTicketPayload_4_list)(nil)

type _MarketAddTicketPayload_4_list struct {
	list *[]*Odds
}

func (x *_MarketAddTicketPayload_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MarketAddTicketPayload_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MarketAddTicketPayload_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Odds)
	(*x.list)[i] = concreteValue
}

func (x *_MarketAddTicketPayload_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Odds)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MarketAddTicketPayload_4_list) AppendMutable() protoreflect.Value {
	v := new(Odds)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MarketAddTicketPayload_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MarketAddTicketPayload_4_list) NewElement() protoreflect.Value {
	v := new(Odds)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MarketAddTicketPayload_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MarketAddTicketPayload          protoreflect.MessageDescriptor
	fd_MarketAddTicketPayload_uid      protoreflect.FieldDescriptor
	fd_MarketAddTicketPayload_start_ts protoreflect.FieldDescriptor
	fd_MarketAddTicketPayload_end_ts   protoreflect.FieldDescriptor
	fd_MarketAddTicketPayload_odds     protoreflect.FieldDescriptor
	fd_MarketAddTicketPayload_status   protoreflect.FieldDescriptor
	fd_MarketAddTicketPayload_meta     protoreflect.FieldDescriptor
)

func init() {
	file_sge_legacy_market_v1beta_ticket_proto_init()
	md_MarketAddTicketPayload = File_sge_legacy_market_v1beta_ticket_proto.Messages().ByName("MarketAddTicketPayload")
	fd_MarketAddTicketPayload_uid = md_MarketAddTicketPayload.Fields().ByName("uid")
	fd_MarketAddTicketPayload_start_ts = md_MarketAddTicketPayload.Fields().ByName("start_ts")
	fd_MarketAddTicketPayload_end_ts = md_MarketAddTicketPayload.Fields().ByName("end_ts")
	fd_MarketAddTicketPayload_odds = md_MarketAddTicketPayload.Fields().ByName("odds")
	fd_MarketAddTicketPayload_status = md_MarketAddTicketPayload.Fields().ByName("status")
	fd_MarketAddTicketPayload_meta = md_MarketAddTicketPayload.Fields().ByName("meta")
}

var _ protoreflect.Message = (*fastReflection_MarketAddTicketPayload)(nil)

type fastReflection_MarketAddTicketPayload MarketAddTicketPayload

func (x *MarketAddTicketPayload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MarketAddTicketPayload)(x)
}

func (x *MarketAddTicketPayload) slowProtoReflect() protoreflect.Message {
	mi := &file_sge_legacy_market_v1beta_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MarketAddTicketPayload_messageType fastReflection_MarketAddTicketPayload_messageType
var _ protoreflect.MessageType = fastReflection_MarketAddTicketPayload_messageType{}

type fastReflection_MarketAddTicketPayload_messageType struct{}

func (x fastReflection_MarketAddTicketPayload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MarketAddTicketPayload)(nil)
}
func (x fastReflection_MarketAddTicketPayload_messageType) New() protoreflect.Message {
	return new(fastReflection_MarketAddTicketPayload)
}
func (x fastReflection_MarketAddTicketPayload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MarketAddTicketPayload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MarketAddTicketPayload) Descriptor() protoreflect.MessageDescriptor {
	return md_MarketAddTicketPayload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MarketAddTicketPayload) Type() protoreflect.MessageType {
	return _fastReflection_MarketAddTicketPayload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MarketAddTicketPayload) New() protoreflect.Message {
	return new(fastReflection_MarketAddTicketPayload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MarketAddTicketPayload) Interface() protoreflect.ProtoMessage {
	return (*MarketAddTicketPayload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MarketAddTicketPayload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_MarketAddTicketPayload_uid, value) {
			return
		}
	}
	if x.StartTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StartTs)
		if !f(fd_MarketAddTicketPayload_start_ts, value) {
			return
		}
	}
	if x.EndTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EndTs)
		if !f(fd_MarketAddTicketPayload_end_ts, value) {
			return
		}
	}
	if len(x.Odds) != 0 {
		value := protoreflect.ValueOfList(&_MarketAddTicketPayload_4_list{list: &x.Odds})
		if !f(fd_MarketAddTicketPayload_odds, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_MarketAddTicketPayload_status, value) {
			return
		}
	}
	if x.Meta != "" {
		value := protoreflect.ValueOfString(x.Meta)
		if !f(fd_MarketAddTicketPayload_meta, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MarketAddTicketPayload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.uid":
		return x.Uid != ""
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.start_ts":
		return x.StartTs != uint64(0)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.end_ts":
		return x.EndTs != uint64(0)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.odds":
		return len(x.Odds) != 0
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.status":
		return x.Status != 0
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.meta":
		return x.Meta != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketAddTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketAddTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketAddTicketPayload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.uid":
		x.Uid = ""
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.start_ts":
		x.StartTs = uint64(0)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.end_ts":
		x.EndTs = uint64(0)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.odds":
		x.Odds = nil
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.status":
		x.Status = 0
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.meta":
		x.Meta = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketAddTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketAddTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MarketAddTicketPayload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.start_ts":
		value := x.StartTs
		return protoreflect.ValueOfUint64(value)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.end_ts":
		value := x.EndTs
		return protoreflect.ValueOfUint64(value)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.odds":
		if len(x.Odds) == 0 {
			return protoreflect.ValueOfList(&_MarketAddTicketPayload_4_list{})
		}
		listValue := &_MarketAddTicketPayload_4_list{list: &x.Odds}
		return protoreflect.ValueOfList(listValue)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.meta":
		value := x.Meta
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketAddTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketAddTicketPayload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketAddTicketPayload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.uid":
		x.Uid = value.Interface().(string)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.start_ts":
		x.StartTs = value.Uint()
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.end_ts":
		x.EndTs = value.Uint()
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.odds":
		lv := value.List()
		clv := lv.(*_MarketAddTicketPayload_4_list)
		x.Odds = *clv.list
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.status":
		x.Status = (MarketStatus)(value.Enum())
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.meta":
		x.Meta = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketAddTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketAddTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketAddTicketPayload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.odds":
		if x.Odds == nil {
			x.Odds = []*Odds{}
		}
		value := &_MarketAddTicketPayload_4_list{list: &x.Odds}
		return protoreflect.ValueOfList(value)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.uid":
		panic(fmt.Errorf("field uid of message sge.legacy.market.v1beta.MarketAddTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.start_ts":
		panic(fmt.Errorf("field start_ts of message sge.legacy.market.v1beta.MarketAddTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.end_ts":
		panic(fmt.Errorf("field end_ts of message sge.legacy.market.v1beta.MarketAddTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.status":
		panic(fmt.Errorf("field status of message sge.legacy.market.v1beta.MarketAddTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.meta":
		panic(fmt.Errorf("field meta of message sge.legacy.market.v1beta.MarketAddTicketPayload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketAddTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketAddTicketPayload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MarketAddTicketPayload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.uid":
		return protoreflect.ValueOfString("")
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.start_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.end_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.odds":
		list := []*Odds{}
		return protoreflect.ValueOfList(&_MarketAddTicketPayload_4_list{list: &list})
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.status":
		return protoreflect.ValueOfEnum(0)
	case "sge.legacy.market.v1beta.MarketAddTicketPayload.meta":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketAddTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketAddTicketPayload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MarketAddTicketPayload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sge.legacy.market.v1beta.MarketAddTicketPayload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MarketAddTicketPayload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketAddTicketPayload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MarketAddTicketPayload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MarketAddTicketPayload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MarketAddTicketPayload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartTs != 0 {
			n += 1 + runtime.Sov(uint64(x.StartTs))
		}
		if x.EndTs != 0 {
			n += 1 + runtime.Sov(uint64(x.EndTs))
		}
		if len(x.Odds) > 0 {
			for _, e := range x.Odds {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.Meta)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MarketAddTicketPayload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Meta) > 0 {
			i -= len(x.Meta)
			copy(dAtA[i:], x.Meta)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Meta)))
			i--
			dAtA[i] = 0x32
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Odds) > 0 {
			for iNdEx := len(x.Odds) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Odds[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.EndTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndTs))
			i--
			dAtA[i] = 0x18
		}
		if x.StartTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartTs))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MarketAddTicketPayload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MarketAddTicketPayload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MarketAddTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
				}
				x.StartTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
				}
				x.EndTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Odds = append(x.Odds, &Odds{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Odds[len(x.Odds)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= MarketStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Meta = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MarketUpdateTicketPayload          protoreflect.MessageDescriptor
	fd_MarketUpdateTicketPayload_uid      protoreflect.FieldDescriptor
	fd_MarketUpdateTicketPayload_start_ts protoreflect.FieldDescriptor
	fd_MarketUpdateTicketPayload_end_ts   protoreflect.FieldDescriptor
	fd_MarketUpdateTicketPayload_status   protoreflect.FieldDescriptor
)

func init() {
	file_sge_legacy_market_v1beta_ticket_proto_init()
	md_MarketUpdateTicketPayload = File_sge_legacy_market_v1beta_ticket_proto.Messages().ByName("MarketUpdateTicketPayload")
	fd_MarketUpdateTicketPayload_uid = md_MarketUpdateTicketPayload.Fields().ByName("uid")
	fd_MarketUpdateTicketPayload_start_ts = md_MarketUpdateTicketPayload.Fields().ByName("start_ts")
	fd_MarketUpdateTicketPayload_end_ts = md_MarketUpdateTicketPayload.Fields().ByName("end_ts")
	fd_MarketUpdateTicketPayload_status = md_MarketUpdateTicketPayload.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_MarketUpdateTicketPayload)(nil)

type fastReflection_MarketUpdateTicketPayload MarketUpdateTicketPayload

func (x *MarketUpdateTicketPayload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MarketUpdateTicketPayload)(x)
}

func (x *MarketUpdateTicketPayload) slowProtoReflect() protoreflect.Message {
	mi := &file_sge_legacy_market_v1beta_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MarketUpdateTicketPayload_messageType fastReflection_MarketUpdateTicketPayload_messageType
var _ protoreflect.MessageType = fastReflection_MarketUpdateTicketPayload_messageType{}

type fastReflection_MarketUpdateTicketPayload_messageType struct{}

func (x fastReflection_MarketUpdateTicketPayload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MarketUpdateTicketPayload)(nil)
}
func (x fastReflection_MarketUpdateTicketPayload_messageType) New() protoreflect.Message {
	return new(fastReflection_MarketUpdateTicketPayload)
}
func (x fastReflection_MarketUpdateTicketPayload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MarketUpdateTicketPayload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MarketUpdateTicketPayload) Descriptor() protoreflect.MessageDescriptor {
	return md_MarketUpdateTicketPayload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MarketUpdateTicketPayload) Type() protoreflect.MessageType {
	return _fastReflection_MarketUpdateTicketPayload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MarketUpdateTicketPayload) New() protoreflect.Message {
	return new(fastReflection_MarketUpdateTicketPayload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MarketUpdateTicketPayload) Interface() protoreflect.ProtoMessage {
	return (*MarketUpdateTicketPayload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MarketUpdateTicketPayload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_MarketUpdateTicketPayload_uid, value) {
			return
		}
	}
	if x.StartTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StartTs)
		if !f(fd_MarketUpdateTicketPayload_start_ts, value) {
			return
		}
	}
	if x.EndTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EndTs)
		if !f(fd_MarketUpdateTicketPayload_end_ts, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_MarketUpdateTicketPayload_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MarketUpdateTicketPayload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.uid":
		return x.Uid != ""
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.start_ts":
		return x.StartTs != uint64(0)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.end_ts":
		return x.EndTs != uint64(0)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketUpdateTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketUpdateTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketUpdateTicketPayload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.uid":
		x.Uid = ""
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.start_ts":
		x.StartTs = uint64(0)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.end_ts":
		x.EndTs = uint64(0)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketUpdateTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketUpdateTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MarketUpdateTicketPayload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.start_ts":
		value := x.StartTs
		return protoreflect.ValueOfUint64(value)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.end_ts":
		value := x.EndTs
		return protoreflect.ValueOfUint64(value)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketUpdateTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketUpdateTicketPayload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketUpdateTicketPayload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.uid":
		x.Uid = value.Interface().(string)
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.start_ts":
		x.StartTs = value.Uint()
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.end_ts":
		x.EndTs = value.Uint()
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.status":
		x.Status = (MarketStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketUpdateTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketUpdateTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketUpdateTicketPayload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.uid":
		panic(fmt.Errorf("field uid of message sge.legacy.market.v1beta.MarketUpdateTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.start_ts":
		panic(fmt.Errorf("field start_ts of message sge.legacy.market.v1beta.MarketUpdateTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.end_ts":
		panic(fmt.Errorf("field end_ts of message sge.legacy.market.v1beta.MarketUpdateTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.status":
		panic(fmt.Errorf("field status of message sge.legacy.market.v1beta.MarketUpdateTicketPayload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketUpdateTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketUpdateTicketPayload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MarketUpdateTicketPayload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.uid":
		return protoreflect.ValueOfString("")
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.start_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.end_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sge.legacy.market.v1beta.MarketUpdateTicketPayload.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketUpdateTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketUpdateTicketPayload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MarketUpdateTicketPayload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sge.legacy.market.v1beta.MarketUpdateTicketPayload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MarketUpdateTicketPayload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketUpdateTicketPayload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MarketUpdateTicketPayload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MarketUpdateTicketPayload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MarketUpdateTicketPayload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartTs != 0 {
			n += 1 + runtime.Sov(uint64(x.StartTs))
		}
		if x.EndTs != 0 {
			n += 1 + runtime.Sov(uint64(x.EndTs))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MarketUpdateTicketPayload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x20
		}
		if x.EndTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndTs))
			i--
			dAtA[i] = 0x18
		}
		if x.StartTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartTs))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MarketUpdateTicketPayload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MarketUpdateTicketPayload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MarketUpdateTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
				}
				x.StartTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
				}
				x.EndTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= MarketStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MarketResolutionTicketPayload_3_list)(nil)

type _MarketResolutionTicketPayload_3_list struct {
	list *[]string
}

func (x *_MarketResolutionTicketPayload_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MarketResolutionTicketPayload_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_MarketResolutionTicketPayload_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MarketResolutionTicketPayload_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MarketResolutionTicketPayload_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MarketResolutionTicketPayload at list field WinnerOddsUids as it is not of Message kind"))
}

func (x *_MarketResolutionTicketPayload_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MarketResolutionTicketPayload_3_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_MarketResolutionTicketPayload_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MarketResolutionTicketPayload                  protoreflect.MessageDescriptor
	fd_MarketResolutionTicketPayload_uid              protoreflect.FieldDescriptor
	fd_MarketResolutionTicketPayload_resolution_ts    protoreflect.FieldDescriptor
	fd_MarketResolutionTicketPayload_winner_odds_uids protoreflect.FieldDescriptor
	fd_MarketResolutionTicketPayload_status           protoreflect.FieldDescriptor
)

func init() {
	file_sge_legacy_market_v1beta_ticket_proto_init()
	md_MarketResolutionTicketPayload = File_sge_legacy_market_v1beta_ticket_proto.Messages().ByName("MarketResolutionTicketPayload")
	fd_MarketResolutionTicketPayload_uid = md_MarketResolutionTicketPayload.Fields().ByName("uid")
	fd_MarketResolutionTicketPayload_resolution_ts = md_MarketResolutionTicketPayload.Fields().ByName("resolution_ts")
	fd_MarketResolutionTicketPayload_winner_odds_uids = md_MarketResolutionTicketPayload.Fields().ByName("winner_odds_uids")
	fd_MarketResolutionTicketPayload_status = md_MarketResolutionTicketPayload.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_MarketResolutionTicketPayload)(nil)

type fastReflection_MarketResolutionTicketPayload MarketResolutionTicketPayload

func (x *MarketResolutionTicketPayload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MarketResolutionTicketPayload)(x)
}

func (x *MarketResolutionTicketPayload) slowProtoReflect() protoreflect.Message {
	mi := &file_sge_legacy_market_v1beta_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MarketResolutionTicketPayload_messageType fastReflection_MarketResolutionTicketPayload_messageType
var _ protoreflect.MessageType = fastReflection_MarketResolutionTicketPayload_messageType{}

type fastReflection_MarketResolutionTicketPayload_messageType struct{}

func (x fastReflection_MarketResolutionTicketPayload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MarketResolutionTicketPayload)(nil)
}
func (x fastReflection_MarketResolutionTicketPayload_messageType) New() protoreflect.Message {
	return new(fastReflection_MarketResolutionTicketPayload)
}
func (x fastReflection_MarketResolutionTicketPayload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MarketResolutionTicketPayload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MarketResolutionTicketPayload) Descriptor() protoreflect.MessageDescriptor {
	return md_MarketResolutionTicketPayload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MarketResolutionTicketPayload) Type() protoreflect.MessageType {
	return _fastReflection_MarketResolutionTicketPayload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MarketResolutionTicketPayload) New() protoreflect.Message {
	return new(fastReflection_MarketResolutionTicketPayload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MarketResolutionTicketPayload) Interface() protoreflect.ProtoMessage {
	return (*MarketResolutionTicketPayload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MarketResolutionTicketPayload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_MarketResolutionTicketPayload_uid, value) {
			return
		}
	}
	if x.ResolutionTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ResolutionTs)
		if !f(fd_MarketResolutionTicketPayload_resolution_ts, value) {
			return
		}
	}
	if len(x.WinnerOddsUids) != 0 {
		value := protoreflect.ValueOfList(&_MarketResolutionTicketPayload_3_list{list: &x.WinnerOddsUids})
		if !f(fd_MarketResolutionTicketPayload_winner_odds_uids, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_MarketResolutionTicketPayload_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MarketResolutionTicketPayload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.uid":
		return x.Uid != ""
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.resolution_ts":
		return x.ResolutionTs != uint64(0)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.winner_odds_uids":
		return len(x.WinnerOddsUids) != 0
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketResolutionTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketResolutionTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketResolutionTicketPayload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.uid":
		x.Uid = ""
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.resolution_ts":
		x.ResolutionTs = uint64(0)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.winner_odds_uids":
		x.WinnerOddsUids = nil
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketResolutionTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketResolutionTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MarketResolutionTicketPayload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.resolution_ts":
		value := x.ResolutionTs
		return protoreflect.ValueOfUint64(value)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.winner_odds_uids":
		if len(x.WinnerOddsUids) == 0 {
			return protoreflect.ValueOfList(&_MarketResolutionTicketPayload_3_list{})
		}
		listValue := &_MarketResolutionTicketPayload_3_list{list: &x.WinnerOddsUids}
		return protoreflect.ValueOfList(listValue)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketResolutionTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketResolutionTicketPayload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketResolutionTicketPayload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.uid":
		x.Uid = value.Interface().(string)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.resolution_ts":
		x.ResolutionTs = value.Uint()
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.winner_odds_uids":
		lv := value.List()
		clv := lv.(*_MarketResolutionTicketPayload_3_list)
		x.WinnerOddsUids = *clv.list
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.status":
		x.Status = (MarketStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketResolutionTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketResolutionTicketPayload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketResolutionTicketPayload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.winner_odds_uids":
		if x.WinnerOddsUids == nil {
			x.WinnerOddsUids = []string{}
		}
		value := &_MarketResolutionTicketPayload_3_list{list: &x.WinnerOddsUids}
		return protoreflect.ValueOfList(value)
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.uid":
		panic(fmt.Errorf("field uid of message sge.legacy.market.v1beta.MarketResolutionTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.resolution_ts":
		panic(fmt.Errorf("field resolution_ts of message sge.legacy.market.v1beta.MarketResolutionTicketPayload is not mutable"))
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.status":
		panic(fmt.Errorf("field status of message sge.legacy.market.v1beta.MarketResolutionTicketPayload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketResolutionTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketResolutionTicketPayload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MarketResolutionTicketPayload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.uid":
		return protoreflect.ValueOfString("")
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.resolution_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.winner_odds_uids":
		list := []string{}
		return protoreflect.ValueOfList(&_MarketResolutionTicketPayload_3_list{list: &list})
	case "sge.legacy.market.v1beta.MarketResolutionTicketPayload.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sge.legacy.market.v1beta.MarketResolutionTicketPayload"))
		}
		panic(fmt.Errorf("message sge.legacy.market.v1beta.MarketResolutionTicketPayload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MarketResolutionTicketPayload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sge.legacy.market.v1beta.MarketResolutionTicketPayload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MarketResolutionTicketPayload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MarketResolutionTicketPayload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MarketResolutionTicketPayload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MarketResolutionTicketPayload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MarketResolutionTicketPayload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ResolutionTs != 0 {
			n += 1 + runtime.Sov(uint64(x.ResolutionTs))
		}
		if len(x.WinnerOddsUids) > 0 {
			for _, s := range x.WinnerOddsUids {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MarketResolutionTicketPayload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x20
		}
		if len(x.WinnerOddsUids) > 0 {
			for iNdEx := len(x.WinnerOddsUids) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.WinnerOddsUids[iNdEx])
				copy(dAtA[i:], x.WinnerOddsUids[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WinnerOddsUids[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.ResolutionTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ResolutionTs))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MarketResolutionTicketPayload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MarketResolutionTicketPayload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MarketResolutionTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ResolutionTs", wireType)
				}
				x.ResolutionTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ResolutionTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WinnerOddsUids", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WinnerOddsUids = append(x.WinnerOddsUids, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= MarketStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sge/legacy/market/v1beta/ticket.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MarketAddTicketPayload indicates data of add market ticket
type MarketAddTicketPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the universal unique identifier of the market.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// start_ts is the start timestamp of the market.
	StartTs uint64 `protobuf:"varint,2,opt,name=start_ts,proto3" json:"start_ts,omitempty"`
	// end_ts is the end timestamp of the market.
	EndTs uint64 `protobuf:"varint,3,opt,name=end_ts,proto3" json:"end_ts,omitempty"`
	// odds is the list of odds of the market.
	Odds []*Odds `protobuf:"bytes,4,rep,name=odds,proto3" json:"odds,omitempty"`
	// status is the current status of the market.
	Status MarketStatus `protobuf:"varint,5,opt,name=status,proto3,enum=sge.legacy.market.v1beta.MarketStatus" json:"status,omitempty"`
	// meta contains human-readable metadata of the market.
	Meta string `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *MarketAddTicketPayload) Reset() {
	*x = MarketAddTicketPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sge_legacy_market_v1beta_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAddTicketPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAddTicketPayload) ProtoMessage() {}

// Deprecated: Use MarketAddTicketPayload.ProtoReflect.Descriptor instead.
func (*MarketAddTicketPayload) Descriptor() ([]byte, []int) {
	return file_sge_legacy_market_v1beta_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *MarketAddTicketPayload) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MarketAddTicketPayload) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *MarketAddTicketPayload) GetEndTs() uint64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *MarketAddTicketPayload) GetOdds() []*Odds {
	if x != nil {
		return x.Odds
	}
	return nil
}

func (x *MarketAddTicketPayload) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return MarketStatus_MARKET_STATUS_UNSPECIFIED
}

func (x *MarketAddTicketPayload) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

// MarketUpdateTicketPayload indicates data of the market update ticket
type MarketUpdateTicketPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the uuid of the market
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// start_ts is the start timestamp of the market
	StartTs uint64 `protobuf:"varint,2,opt,name=start_ts,proto3" json:"start_ts,omitempty"`
	// end_ts is the end timestamp of the market
	EndTs uint64 `protobuf:"varint,3,opt,name=end_ts,proto3" json:"end_ts,omitempty"`
	// status is the status of the resolution.
	Status MarketStatus `protobuf:"varint,4,opt,name=status,proto3,enum=sge.legacy.market.v1beta.MarketStatus" json:"status,omitempty"`
}

func (x *MarketUpdateTicketPayload) Reset() {
	*x = MarketUpdateTicketPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sge_legacy_market_v1beta_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketUpdateTicketPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketUpdateTicketPayload) ProtoMessage() {}

// Deprecated: Use MarketUpdateTicketPayload.ProtoReflect.Descriptor instead.
func (*MarketUpdateTicketPayload) Descriptor() ([]byte, []int) {
	return file_sge_legacy_market_v1beta_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *MarketUpdateTicketPayload) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MarketUpdateTicketPayload) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *MarketUpdateTicketPayload) GetEndTs() uint64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *MarketUpdateTicketPayload) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return MarketStatus_MARKET_STATUS_UNSPECIFIED
}

// MarketResolutionTicketPayload indicates data of the
// resolution of the market ticket.
type MarketResolutionTicketPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the universal unique identifier of the market.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// resolution_ts is the resolution timestamp of the market.
	ResolutionTs uint64 `protobuf:"varint,2,opt,name=resolution_ts,proto3" json:"resolution_ts,omitempty"`
	// winner_odds_uids is the universal unique identifier list of the winner
	// odds.
	WinnerOddsUids []string `protobuf:"bytes,3,rep,name=winner_odds_uids,proto3" json:"winner_odds_uids,omitempty"`
	// status is the status of the resolution.
	Status MarketStatus `protobuf:"varint,4,opt,name=status,proto3,enum=sge.legacy.market.v1beta.MarketStatus" json:"status,omitempty"`
}

func (x *MarketResolutionTicketPayload) Reset() {
	*x = MarketResolutionTicketPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sge_legacy_market_v1beta_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketResolutionTicketPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketResolutionTicketPayload) ProtoMessage() {}

// Deprecated: Use MarketResolutionTicketPayload.ProtoReflect.Descriptor instead.
func (*MarketResolutionTicketPayload) Descriptor() ([]byte, []int) {
	return file_sge_legacy_market_v1beta_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *MarketResolutionTicketPayload) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MarketResolutionTicketPayload) GetResolutionTs() uint64 {
	if x != nil {
		return x.ResolutionTs
	}
	return 0
}

func (x *MarketResolutionTicketPayload) GetWinnerOddsUids() []string {
	if x != nil {
		return x.WinnerOddsUids
	}
	return nil
}

func (x *MarketResolutionTicketPayload) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return MarketStatus_MARKET_STATUS_UNSPECIFIED
}

var File_sge_legacy_market_v1beta_ticket_proto protoreflect.FileDescriptor

var file_sge_legacy_market_v1beta_ticket_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x67, 0x65, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x67, 0x65, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x73, 0x67, 0x65, 0x2f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x73, 0x67, 0x65, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6f, 0x64, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f,
	0x03, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x17, 0xe2, 0xde, 0x1f, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x53, 0xea,
	0xde, 0x1f, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xe2, 0xde, 0x1f, 0x05, 0x45, 0x6e, 0x64, 0x54, 0x53,
	0xea, 0xde, 0x1f, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x64, 0x64, 0x73,
	0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x03, 0x55, 0x49, 0x44, 0xea, 0xde,
	0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0xe2, 0xde,
	0x1f, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x53, 0xea, 0xde, 0x1f, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x13, 0xe2, 0xde, 0x1f, 0x05, 0x45, 0x6e, 0x64, 0x54, 0x53, 0xea, 0xde, 0x1f, 0x06, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73,
	0x67, 0x65, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x02, 0x0a,
	0x1d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f,
	0x03, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x47, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x21, 0xe2, 0xde, 0x1f, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x53, 0xea, 0xde, 0x1f, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x26, 0xe2, 0xde, 0x1f, 0x0e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4f,
	0x64, 0x64, 0x73, 0x55, 0x49, 0x44, 0x73, 0xea, 0xde, 0x1f, 0x10, 0x77, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x52, 0x10, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x67, 0x65, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xf4, 0x01,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x0b,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x65, 0x2d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x67,
	0x65, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0xa2, 0x02, 0x03, 0x53, 0x4c, 0x4d, 0xaa, 0x02, 0x18, 0x53, 0x67, 0x65, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0xca, 0x02, 0x18, 0x53, 0x67, 0x65, 0x5c, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xe2,
	0x02, 0x24, 0x53, 0x67, 0x65, 0x5c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x53, 0x67, 0x65, 0x3a, 0x3a, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x3a, 0x3a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sge_legacy_market_v1beta_ticket_proto_rawDescOnce sync.Once
	file_sge_legacy_market_v1beta_ticket_proto_rawDescData = file_sge_legacy_market_v1beta_ticket_proto_rawDesc
)

func file_sge_legacy_market_v1beta_ticket_proto_rawDescGZIP() []byte {
	file_sge_legacy_market_v1beta_ticket_proto_rawDescOnce.Do(func() {
		file_sge_legacy_market_v1beta_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_sge_legacy_market_v1beta_ticket_proto_rawDescData)
	})
	return file_sge_legacy_market_v1beta_ticket_proto_rawDescData
}

var file_sge_legacy_market_v1beta_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sge_legacy_market_v1beta_ticket_proto_goTypes = []interface{}{
	(*MarketAddTicketPayload)(nil),        // 0: sge.legacy.market.v1beta.MarketAddTicketPayload
	(*MarketUpdateTicketPayload)(nil),     // 1: sge.legacy.market.v1beta.MarketUpdateTicketPayload
	(*MarketResolutionTicketPayload)(nil), // 2: sge.legacy.market.v1beta.MarketResolutionTicketPayload
	(*Odds)(nil),                          // 3: sge.legacy.market.v1beta.Odds
	(MarketStatus)(0),                     // 4: sge.legacy.market.v1beta.MarketStatus
}
var file_sge_legacy_market_v1beta_ticket_proto_depIdxs = []int32{
	3, // 0: sge.legacy.market.v1beta.MarketAddTicketPayload.odds:type_name -> sge.legacy.market.v1beta.Odds
	4, // 1: sge.legacy.market.v1beta.MarketAddTicketPayload.status:type_name -> sge.legacy.market.v1beta.MarketStatus
	4, // 2: sge.legacy.market.v1beta.MarketUpdateTicketPayload.status:type_name -> sge.legacy.market.v1beta.MarketStatus
	4, // 3: sge.legacy.market.v1beta.MarketResolutionTicketPayload.status:type_name -> sge.legacy.market.v1beta.MarketStatus
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_sge_legacy_market_v1beta_ticket_proto_init() }
func file_sge_legacy_market_v1beta_ticket_proto_init() {
	if File_sge_legacy_market_v1beta_ticket_proto != nil {
		return
	}
	file_sge_legacy_market_v1beta_market_proto_init()
	file_sge_legacy_market_v1beta_odds_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sge_legacy_market_v1beta_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAddTicketPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sge_legacy_market_v1beta_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketUpdateTicketPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sge_legacy_market_v1beta_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketResolutionTicketPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sge_legacy_market_v1beta_ticket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sge_legacy_market_v1beta_ticket_proto_goTypes,
		DependencyIndexes: file_sge_legacy_market_v1beta_ticket_proto_depIdxs,
		MessageInfos:      file_sge_legacy_market_v1beta_ticket_proto_msgTypes,
	}.Build()
	File_sge_legacy_market_v1beta_ticket_proto = out.File
	file_sge_legacy_market_v1beta_ticket_proto_rawDesc = nil
	file_sge_legacy_market_v1beta_ticket_proto_goTypes = nil
	file_sge_legacy_market_v1beta_ticket_proto_depIdxs = nil
}
