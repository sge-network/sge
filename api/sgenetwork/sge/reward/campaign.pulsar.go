// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package reward

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Campaign                    protoreflect.MessageDescriptor
	fd_Campaign_creator            protoreflect.FieldDescriptor
	fd_Campaign_uid                protoreflect.FieldDescriptor
	fd_Campaign_promoter           protoreflect.FieldDescriptor
	fd_Campaign_start_ts           protoreflect.FieldDescriptor
	fd_Campaign_end_ts             protoreflect.FieldDescriptor
	fd_Campaign_reward_category    protoreflect.FieldDescriptor
	fd_Campaign_reward_type        protoreflect.FieldDescriptor
	fd_Campaign_reward_amount_type protoreflect.FieldDescriptor
	fd_Campaign_reward_amount      protoreflect.FieldDescriptor
	fd_Campaign_pool               protoreflect.FieldDescriptor
	fd_Campaign_is_active          protoreflect.FieldDescriptor
	fd_Campaign_meta               protoreflect.FieldDescriptor
	fd_Campaign_cap_count          protoreflect.FieldDescriptor
	fd_Campaign_constraints        protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_reward_campaign_proto_init()
	md_Campaign = File_sgenetwork_sge_reward_campaign_proto.Messages().ByName("Campaign")
	fd_Campaign_creator = md_Campaign.Fields().ByName("creator")
	fd_Campaign_uid = md_Campaign.Fields().ByName("uid")
	fd_Campaign_promoter = md_Campaign.Fields().ByName("promoter")
	fd_Campaign_start_ts = md_Campaign.Fields().ByName("start_ts")
	fd_Campaign_end_ts = md_Campaign.Fields().ByName("end_ts")
	fd_Campaign_reward_category = md_Campaign.Fields().ByName("reward_category")
	fd_Campaign_reward_type = md_Campaign.Fields().ByName("reward_type")
	fd_Campaign_reward_amount_type = md_Campaign.Fields().ByName("reward_amount_type")
	fd_Campaign_reward_amount = md_Campaign.Fields().ByName("reward_amount")
	fd_Campaign_pool = md_Campaign.Fields().ByName("pool")
	fd_Campaign_is_active = md_Campaign.Fields().ByName("is_active")
	fd_Campaign_meta = md_Campaign.Fields().ByName("meta")
	fd_Campaign_cap_count = md_Campaign.Fields().ByName("cap_count")
	fd_Campaign_constraints = md_Campaign.Fields().ByName("constraints")
}

var _ protoreflect.Message = (*fastReflection_Campaign)(nil)

type fastReflection_Campaign Campaign

func (x *Campaign) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Campaign)(x)
}

func (x *Campaign) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_reward_campaign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Campaign_messageType fastReflection_Campaign_messageType
var _ protoreflect.MessageType = fastReflection_Campaign_messageType{}

type fastReflection_Campaign_messageType struct{}

func (x fastReflection_Campaign_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Campaign)(nil)
}
func (x fastReflection_Campaign_messageType) New() protoreflect.Message {
	return new(fastReflection_Campaign)
}
func (x fastReflection_Campaign_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Campaign
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Campaign) Descriptor() protoreflect.MessageDescriptor {
	return md_Campaign
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Campaign) Type() protoreflect.MessageType {
	return _fastReflection_Campaign_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Campaign) New() protoreflect.Message {
	return new(fastReflection_Campaign)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Campaign) Interface() protoreflect.ProtoMessage {
	return (*Campaign)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Campaign) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Campaign_creator, value) {
			return
		}
	}
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_Campaign_uid, value) {
			return
		}
	}
	if x.Promoter != "" {
		value := protoreflect.ValueOfString(x.Promoter)
		if !f(fd_Campaign_promoter, value) {
			return
		}
	}
	if x.StartTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StartTs)
		if !f(fd_Campaign_start_ts, value) {
			return
		}
	}
	if x.EndTs != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EndTs)
		if !f(fd_Campaign_end_ts, value) {
			return
		}
	}
	if x.RewardCategory != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.RewardCategory))
		if !f(fd_Campaign_reward_category, value) {
			return
		}
	}
	if x.RewardType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.RewardType))
		if !f(fd_Campaign_reward_type, value) {
			return
		}
	}
	if x.RewardAmountType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.RewardAmountType))
		if !f(fd_Campaign_reward_amount_type, value) {
			return
		}
	}
	if x.RewardAmount != nil {
		value := protoreflect.ValueOfMessage(x.RewardAmount.ProtoReflect())
		if !f(fd_Campaign_reward_amount, value) {
			return
		}
	}
	if x.Pool != nil {
		value := protoreflect.ValueOfMessage(x.Pool.ProtoReflect())
		if !f(fd_Campaign_pool, value) {
			return
		}
	}
	if x.IsActive != false {
		value := protoreflect.ValueOfBool(x.IsActive)
		if !f(fd_Campaign_is_active, value) {
			return
		}
	}
	if x.Meta != "" {
		value := protoreflect.ValueOfString(x.Meta)
		if !f(fd_Campaign_meta, value) {
			return
		}
	}
	if x.CapCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CapCount)
		if !f(fd_Campaign_cap_count, value) {
			return
		}
	}
	if x.Constraints != nil {
		value := protoreflect.ValueOfMessage(x.Constraints.ProtoReflect())
		if !f(fd_Campaign_constraints, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Campaign) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Campaign.creator":
		return x.Creator != ""
	case "sgenetwork.sge.reward.Campaign.uid":
		return x.Uid != ""
	case "sgenetwork.sge.reward.Campaign.promoter":
		return x.Promoter != ""
	case "sgenetwork.sge.reward.Campaign.start_ts":
		return x.StartTs != uint64(0)
	case "sgenetwork.sge.reward.Campaign.end_ts":
		return x.EndTs != uint64(0)
	case "sgenetwork.sge.reward.Campaign.reward_category":
		return x.RewardCategory != 0
	case "sgenetwork.sge.reward.Campaign.reward_type":
		return x.RewardType != 0
	case "sgenetwork.sge.reward.Campaign.reward_amount_type":
		return x.RewardAmountType != 0
	case "sgenetwork.sge.reward.Campaign.reward_amount":
		return x.RewardAmount != nil
	case "sgenetwork.sge.reward.Campaign.pool":
		return x.Pool != nil
	case "sgenetwork.sge.reward.Campaign.is_active":
		return x.IsActive != false
	case "sgenetwork.sge.reward.Campaign.meta":
		return x.Meta != ""
	case "sgenetwork.sge.reward.Campaign.cap_count":
		return x.CapCount != uint64(0)
	case "sgenetwork.sge.reward.Campaign.constraints":
		return x.Constraints != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Campaign"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Campaign does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Campaign) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Campaign.creator":
		x.Creator = ""
	case "sgenetwork.sge.reward.Campaign.uid":
		x.Uid = ""
	case "sgenetwork.sge.reward.Campaign.promoter":
		x.Promoter = ""
	case "sgenetwork.sge.reward.Campaign.start_ts":
		x.StartTs = uint64(0)
	case "sgenetwork.sge.reward.Campaign.end_ts":
		x.EndTs = uint64(0)
	case "sgenetwork.sge.reward.Campaign.reward_category":
		x.RewardCategory = 0
	case "sgenetwork.sge.reward.Campaign.reward_type":
		x.RewardType = 0
	case "sgenetwork.sge.reward.Campaign.reward_amount_type":
		x.RewardAmountType = 0
	case "sgenetwork.sge.reward.Campaign.reward_amount":
		x.RewardAmount = nil
	case "sgenetwork.sge.reward.Campaign.pool":
		x.Pool = nil
	case "sgenetwork.sge.reward.Campaign.is_active":
		x.IsActive = false
	case "sgenetwork.sge.reward.Campaign.meta":
		x.Meta = ""
	case "sgenetwork.sge.reward.Campaign.cap_count":
		x.CapCount = uint64(0)
	case "sgenetwork.sge.reward.Campaign.constraints":
		x.Constraints = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Campaign"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Campaign does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Campaign) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.reward.Campaign.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.reward.Campaign.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.reward.Campaign.promoter":
		value := x.Promoter
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.reward.Campaign.start_ts":
		value := x.StartTs
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.reward.Campaign.end_ts":
		value := x.EndTs
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.reward.Campaign.reward_category":
		value := x.RewardCategory
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sgenetwork.sge.reward.Campaign.reward_type":
		value := x.RewardType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sgenetwork.sge.reward.Campaign.reward_amount_type":
		value := x.RewardAmountType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sgenetwork.sge.reward.Campaign.reward_amount":
		value := x.RewardAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.pool":
		value := x.Pool
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.is_active":
		value := x.IsActive
		return protoreflect.ValueOfBool(value)
	case "sgenetwork.sge.reward.Campaign.meta":
		value := x.Meta
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.reward.Campaign.cap_count":
		value := x.CapCount
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.reward.Campaign.constraints":
		value := x.Constraints
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Campaign"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Campaign does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Campaign) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Campaign.creator":
		x.Creator = value.Interface().(string)
	case "sgenetwork.sge.reward.Campaign.uid":
		x.Uid = value.Interface().(string)
	case "sgenetwork.sge.reward.Campaign.promoter":
		x.Promoter = value.Interface().(string)
	case "sgenetwork.sge.reward.Campaign.start_ts":
		x.StartTs = value.Uint()
	case "sgenetwork.sge.reward.Campaign.end_ts":
		x.EndTs = value.Uint()
	case "sgenetwork.sge.reward.Campaign.reward_category":
		x.RewardCategory = (RewardCategory)(value.Enum())
	case "sgenetwork.sge.reward.Campaign.reward_type":
		x.RewardType = (RewardType)(value.Enum())
	case "sgenetwork.sge.reward.Campaign.reward_amount_type":
		x.RewardAmountType = (RewardAmountType)(value.Enum())
	case "sgenetwork.sge.reward.Campaign.reward_amount":
		x.RewardAmount = value.Message().Interface().(*RewardAmount)
	case "sgenetwork.sge.reward.Campaign.pool":
		x.Pool = value.Message().Interface().(*Pool)
	case "sgenetwork.sge.reward.Campaign.is_active":
		x.IsActive = value.Bool()
	case "sgenetwork.sge.reward.Campaign.meta":
		x.Meta = value.Interface().(string)
	case "sgenetwork.sge.reward.Campaign.cap_count":
		x.CapCount = value.Uint()
	case "sgenetwork.sge.reward.Campaign.constraints":
		x.Constraints = value.Message().Interface().(*CampaignConstraints)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Campaign"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Campaign does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Campaign) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Campaign.reward_amount":
		if x.RewardAmount == nil {
			x.RewardAmount = new(RewardAmount)
		}
		return protoreflect.ValueOfMessage(x.RewardAmount.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.pool":
		if x.Pool == nil {
			x.Pool = new(Pool)
		}
		return protoreflect.ValueOfMessage(x.Pool.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.constraints":
		if x.Constraints == nil {
			x.Constraints = new(CampaignConstraints)
		}
		return protoreflect.ValueOfMessage(x.Constraints.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.creator":
		panic(fmt.Errorf("field creator of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.uid":
		panic(fmt.Errorf("field uid of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.promoter":
		panic(fmt.Errorf("field promoter of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.start_ts":
		panic(fmt.Errorf("field start_ts of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.end_ts":
		panic(fmt.Errorf("field end_ts of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.reward_category":
		panic(fmt.Errorf("field reward_category of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.reward_type":
		panic(fmt.Errorf("field reward_type of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.reward_amount_type":
		panic(fmt.Errorf("field reward_amount_type of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.is_active":
		panic(fmt.Errorf("field is_active of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.meta":
		panic(fmt.Errorf("field meta of message sgenetwork.sge.reward.Campaign is not mutable"))
	case "sgenetwork.sge.reward.Campaign.cap_count":
		panic(fmt.Errorf("field cap_count of message sgenetwork.sge.reward.Campaign is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Campaign"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Campaign does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Campaign) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Campaign.creator":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.reward.Campaign.uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.reward.Campaign.promoter":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.reward.Campaign.start_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.reward.Campaign.end_ts":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.reward.Campaign.reward_category":
		return protoreflect.ValueOfEnum(0)
	case "sgenetwork.sge.reward.Campaign.reward_type":
		return protoreflect.ValueOfEnum(0)
	case "sgenetwork.sge.reward.Campaign.reward_amount_type":
		return protoreflect.ValueOfEnum(0)
	case "sgenetwork.sge.reward.Campaign.reward_amount":
		m := new(RewardAmount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.pool":
		m := new(Pool)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "sgenetwork.sge.reward.Campaign.is_active":
		return protoreflect.ValueOfBool(false)
	case "sgenetwork.sge.reward.Campaign.meta":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.reward.Campaign.cap_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.reward.Campaign.constraints":
		m := new(CampaignConstraints)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Campaign"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Campaign does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Campaign) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.reward.Campaign", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Campaign) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Campaign) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Campaign) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Campaign) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Campaign)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Promoter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartTs != 0 {
			n += 1 + runtime.Sov(uint64(x.StartTs))
		}
		if x.EndTs != 0 {
			n += 1 + runtime.Sov(uint64(x.EndTs))
		}
		if x.RewardCategory != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardCategory))
		}
		if x.RewardType != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardType))
		}
		if x.RewardAmountType != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardAmountType))
		}
		if x.RewardAmount != nil {
			l = options.Size(x.RewardAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pool != nil {
			l = options.Size(x.Pool)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsActive {
			n += 2
		}
		l = len(x.Meta)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CapCount != 0 {
			n += 1 + runtime.Sov(uint64(x.CapCount))
		}
		if x.Constraints != nil {
			l = options.Size(x.Constraints)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Campaign)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Constraints != nil {
			encoded, err := options.Marshal(x.Constraints)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		}
		if x.CapCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CapCount))
			i--
			dAtA[i] = 0x70
		}
		if len(x.Meta) > 0 {
			i -= len(x.Meta)
			copy(dAtA[i:], x.Meta)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Meta)))
			i--
			dAtA[i] = 0x6a
		}
		if x.IsActive {
			i--
			if x.IsActive {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if x.Pool != nil {
			encoded, err := options.Marshal(x.Pool)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if x.RewardAmount != nil {
			encoded, err := options.Marshal(x.RewardAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.RewardAmountType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardAmountType))
			i--
			dAtA[i] = 0x40
		}
		if x.RewardType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardType))
			i--
			dAtA[i] = 0x38
		}
		if x.RewardCategory != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardCategory))
			i--
			dAtA[i] = 0x30
		}
		if x.EndTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndTs))
			i--
			dAtA[i] = 0x28
		}
		if x.StartTs != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartTs))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Promoter) > 0 {
			i -= len(x.Promoter)
			copy(dAtA[i:], x.Promoter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Promoter)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Campaign)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Campaign: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Campaign: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Promoter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Promoter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
				}
				x.StartTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
				}
				x.EndTs = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndTs |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardCategory", wireType)
				}
				x.RewardCategory = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardCategory |= RewardCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
				}
				x.RewardType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardType |= RewardType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardAmountType", wireType)
				}
				x.RewardAmountType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardAmountType |= RewardAmountType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RewardAmount == nil {
					x.RewardAmount = &RewardAmount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pool == nil {
					x.Pool = &Pool{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pool); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsActive = bool(v != 0)
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Meta = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CapCount", wireType)
				}
				x.CapCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CapCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Constraints == nil {
					x.Constraints = &CampaignConstraints{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Constraints); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Pool           protoreflect.MessageDescriptor
	fd_Pool_total     protoreflect.FieldDescriptor
	fd_Pool_spent     protoreflect.FieldDescriptor
	fd_Pool_withdrawn protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_reward_campaign_proto_init()
	md_Pool = File_sgenetwork_sge_reward_campaign_proto.Messages().ByName("Pool")
	fd_Pool_total = md_Pool.Fields().ByName("total")
	fd_Pool_spent = md_Pool.Fields().ByName("spent")
	fd_Pool_withdrawn = md_Pool.Fields().ByName("withdrawn")
}

var _ protoreflect.Message = (*fastReflection_Pool)(nil)

type fastReflection_Pool Pool

func (x *Pool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Pool)(x)
}

func (x *Pool) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_reward_campaign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Pool_messageType fastReflection_Pool_messageType
var _ protoreflect.MessageType = fastReflection_Pool_messageType{}

type fastReflection_Pool_messageType struct{}

func (x fastReflection_Pool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Pool)(nil)
}
func (x fastReflection_Pool_messageType) New() protoreflect.Message {
	return new(fastReflection_Pool)
}
func (x fastReflection_Pool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Pool) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Pool) Type() protoreflect.MessageType {
	return _fastReflection_Pool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Pool) New() protoreflect.Message {
	return new(fastReflection_Pool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Pool) Interface() protoreflect.ProtoMessage {
	return (*Pool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Pool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Total != "" {
		value := protoreflect.ValueOfString(x.Total)
		if !f(fd_Pool_total, value) {
			return
		}
	}
	if x.Spent != "" {
		value := protoreflect.ValueOfString(x.Spent)
		if !f(fd_Pool_spent, value) {
			return
		}
	}
	if x.Withdrawn != "" {
		value := protoreflect.ValueOfString(x.Withdrawn)
		if !f(fd_Pool_withdrawn, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Pool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Pool.total":
		return x.Total != ""
	case "sgenetwork.sge.reward.Pool.spent":
		return x.Spent != ""
	case "sgenetwork.sge.reward.Pool.withdrawn":
		return x.Withdrawn != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Pool"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Pool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Pool.total":
		x.Total = ""
	case "sgenetwork.sge.reward.Pool.spent":
		x.Spent = ""
	case "sgenetwork.sge.reward.Pool.withdrawn":
		x.Withdrawn = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Pool"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Pool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Pool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.reward.Pool.total":
		value := x.Total
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.reward.Pool.spent":
		value := x.Spent
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.reward.Pool.withdrawn":
		value := x.Withdrawn
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Pool"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Pool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Pool.total":
		x.Total = value.Interface().(string)
	case "sgenetwork.sge.reward.Pool.spent":
		x.Spent = value.Interface().(string)
	case "sgenetwork.sge.reward.Pool.withdrawn":
		x.Withdrawn = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Pool"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Pool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Pool.total":
		panic(fmt.Errorf("field total of message sgenetwork.sge.reward.Pool is not mutable"))
	case "sgenetwork.sge.reward.Pool.spent":
		panic(fmt.Errorf("field spent of message sgenetwork.sge.reward.Pool is not mutable"))
	case "sgenetwork.sge.reward.Pool.withdrawn":
		panic(fmt.Errorf("field withdrawn of message sgenetwork.sge.reward.Pool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Pool"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Pool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Pool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.Pool.total":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.reward.Pool.spent":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.reward.Pool.withdrawn":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.Pool"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.Pool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Pool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.reward.Pool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Pool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Pool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Pool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Total)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Spent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Withdrawn)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Withdrawn) > 0 {
			i -= len(x.Withdrawn)
			copy(dAtA[i:], x.Withdrawn)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Withdrawn)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Spent) > 0 {
			i -= len(x.Spent)
			copy(dAtA[i:], x.Spent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Spent)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Total) > 0 {
			i -= len(x.Total)
			copy(dAtA[i:], x.Total)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Total)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Total = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Spent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Spent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Withdrawn = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CampaignConstraints                protoreflect.MessageDescriptor
	fd_CampaignConstraints_max_bet_amount protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_reward_campaign_proto_init()
	md_CampaignConstraints = File_sgenetwork_sge_reward_campaign_proto.Messages().ByName("CampaignConstraints")
	fd_CampaignConstraints_max_bet_amount = md_CampaignConstraints.Fields().ByName("max_bet_amount")
}

var _ protoreflect.Message = (*fastReflection_CampaignConstraints)(nil)

type fastReflection_CampaignConstraints CampaignConstraints

func (x *CampaignConstraints) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CampaignConstraints)(x)
}

func (x *CampaignConstraints) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_reward_campaign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CampaignConstraints_messageType fastReflection_CampaignConstraints_messageType
var _ protoreflect.MessageType = fastReflection_CampaignConstraints_messageType{}

type fastReflection_CampaignConstraints_messageType struct{}

func (x fastReflection_CampaignConstraints_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CampaignConstraints)(nil)
}
func (x fastReflection_CampaignConstraints_messageType) New() protoreflect.Message {
	return new(fastReflection_CampaignConstraints)
}
func (x fastReflection_CampaignConstraints_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CampaignConstraints
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CampaignConstraints) Descriptor() protoreflect.MessageDescriptor {
	return md_CampaignConstraints
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CampaignConstraints) Type() protoreflect.MessageType {
	return _fastReflection_CampaignConstraints_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CampaignConstraints) New() protoreflect.Message {
	return new(fastReflection_CampaignConstraints)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CampaignConstraints) Interface() protoreflect.ProtoMessage {
	return (*CampaignConstraints)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CampaignConstraints) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MaxBetAmount != "" {
		value := protoreflect.ValueOfString(x.MaxBetAmount)
		if !f(fd_CampaignConstraints_max_bet_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CampaignConstraints) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.CampaignConstraints.max_bet_amount":
		return x.MaxBetAmount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.CampaignConstraints"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.CampaignConstraints does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CampaignConstraints) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.CampaignConstraints.max_bet_amount":
		x.MaxBetAmount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.CampaignConstraints"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.CampaignConstraints does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CampaignConstraints) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.reward.CampaignConstraints.max_bet_amount":
		value := x.MaxBetAmount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.CampaignConstraints"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.CampaignConstraints does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CampaignConstraints) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.CampaignConstraints.max_bet_amount":
		x.MaxBetAmount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.CampaignConstraints"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.CampaignConstraints does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CampaignConstraints) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.CampaignConstraints.max_bet_amount":
		panic(fmt.Errorf("field max_bet_amount of message sgenetwork.sge.reward.CampaignConstraints is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.CampaignConstraints"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.CampaignConstraints does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CampaignConstraints) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.reward.CampaignConstraints.max_bet_amount":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.reward.CampaignConstraints"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.reward.CampaignConstraints does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CampaignConstraints) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.reward.CampaignConstraints", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CampaignConstraints) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CampaignConstraints) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CampaignConstraints) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CampaignConstraints) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CampaignConstraints)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.MaxBetAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CampaignConstraints)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MaxBetAmount) > 0 {
			i -= len(x.MaxBetAmount)
			copy(dAtA[i:], x.MaxBetAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxBetAmount)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CampaignConstraints)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CampaignConstraints: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CampaignConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxBetAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxBetAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sgenetwork/sge/reward/campaign.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Campaign is type for defining the campaign properties.
type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// creator is the address of campaign creator.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// uid is the unique identifier of a campaign.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// promoter is the address of campaign promoter.
	// Funds for the campaign would be deducted from this account.
	Promoter string `protobuf:"bytes,3,opt,name=promoter,proto3" json:"promoter,omitempty"`
	// start_ts is the start timestamp of a campaign.
	StartTs uint64 `protobuf:"varint,4,opt,name=start_ts,proto3" json:"start_ts,omitempty"`
	// end_ts is the end timestamp of a campaign.
	EndTs uint64 `protobuf:"varint,5,opt,name=end_ts,proto3" json:"end_ts,omitempty"`
	// reward_category is the category of reward.
	RewardCategory RewardCategory `protobuf:"varint,6,opt,name=reward_category,json=rewardCategory,proto3,enum=sgenetwork.sge.reward.RewardCategory" json:"reward_category,omitempty"`
	// reward_type is the type of reward.
	RewardType RewardType `protobuf:"varint,7,opt,name=reward_type,json=rewardType,proto3,enum=sgenetwork.sge.reward.RewardType" json:"reward_type,omitempty"`
	// amount_type is the type of reward amount.
	RewardAmountType RewardAmountType `protobuf:"varint,8,opt,name=reward_amount_type,json=rewardAmountType,proto3,enum=sgenetwork.sge.reward.RewardAmountType" json:"reward_amount_type,omitempty"`
	// reward_amount is the amount defined for a reward.
	RewardAmount *RewardAmount `protobuf:"bytes,9,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
	// pool is the tracker of campaign funds.
	Pool *Pool `protobuf:"bytes,10,opt,name=pool,proto3" json:"pool,omitempty"`
	// is_active is the flag to check if the campaign is active or not.
	IsActive bool `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// meta is the metadata of the campaign.
	// It is a stringified base64 encoded json.
	Meta string `protobuf:"bytes,13,opt,name=meta,proto3" json:"meta,omitempty"`
	// cap_count is the maximum allowed grant for a certain account.
	CapCount uint64 `protobuf:"varint,14,opt,name=cap_count,json=capCount,proto3" json:"cap_count,omitempty"`
	// constraints is the constrains of a campaign.
	Constraints *CampaignConstraints `protobuf:"bytes,15,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_reward_campaign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_reward_campaign_proto_rawDescGZIP(), []int{0}
}

func (x *Campaign) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Campaign) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Campaign) GetPromoter() string {
	if x != nil {
		return x.Promoter
	}
	return ""
}

func (x *Campaign) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *Campaign) GetEndTs() uint64 {
	if x != nil {
		return x.EndTs
	}
	return 0
}

func (x *Campaign) GetRewardCategory() RewardCategory {
	if x != nil {
		return x.RewardCategory
	}
	return RewardCategory_REWARD_CATEGORY_UNSPECIFIED
}

func (x *Campaign) GetRewardType() RewardType {
	if x != nil {
		return x.RewardType
	}
	return RewardType_REWARD_TYPE_UNSPECIFIED
}

func (x *Campaign) GetRewardAmountType() RewardAmountType {
	if x != nil {
		return x.RewardAmountType
	}
	return RewardAmountType_REWARD_AMOUNT_TYPE_UNSPECIFIED
}

func (x *Campaign) GetRewardAmount() *RewardAmount {
	if x != nil {
		return x.RewardAmount
	}
	return nil
}

func (x *Campaign) GetPool() *Pool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Campaign) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Campaign) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *Campaign) GetCapCount() uint64 {
	if x != nil {
		return x.CapCount
	}
	return 0
}

func (x *Campaign) GetConstraints() *CampaignConstraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// Pool tracks funds assigned and spent to/for a campaign.
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     string `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Spent     string `protobuf:"bytes,2,opt,name=spent,proto3" json:"spent,omitempty"`
	Withdrawn string `protobuf:"bytes,3,opt,name=withdrawn,proto3" json:"withdrawn,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_reward_campaign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_reward_campaign_proto_rawDescGZIP(), []int{1}
}

func (x *Pool) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *Pool) GetSpent() string {
	if x != nil {
		return x.Spent
	}
	return ""
}

func (x *Pool) GetWithdrawn() string {
	if x != nil {
		return x.Withdrawn
	}
	return ""
}

// CampaignConstraints contains campaign constraints and criteria.
type CampaignConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBetAmount string `protobuf:"bytes,1,opt,name=max_bet_amount,json=maxBetAmount,proto3" json:"max_bet_amount,omitempty"`
}

func (x *CampaignConstraints) Reset() {
	*x = CampaignConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_reward_campaign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampaignConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignConstraints) ProtoMessage() {}

// Deprecated: Use CampaignConstraints.ProtoReflect.Descriptor instead.
func (*CampaignConstraints) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_reward_campaign_proto_rawDescGZIP(), []int{2}
}

func (x *CampaignConstraints) GetMaxBetAmount() string {
	if x != nil {
		return x.MaxBetAmount
	}
	return ""
}

var File_sgenetwork_sge_reward_campaign_proto protoreflect.FileDescriptor

var file_sgenetwork_sge_reward_campaign_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65,
	0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x06, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x32, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x03, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0xe2,
	0xde, 0x1f, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x53, 0xea, 0xde, 0x1f, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x13, 0xe2, 0xde, 0x1f, 0x05, 0x45, 0x6e, 0x64, 0x54, 0x53, 0xea, 0xde, 0x1f, 0x06, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67,
	0x65, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x43,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x0c,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xf2, 0xde, 0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x22, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x0c, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x6e, 0x22, 0x73, 0x0a, 0x13, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0xd6, 0x01, 0x0a, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67,
	0x65, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x65, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0xa2,
	0x02, 0x03, 0x53, 0x53, 0x52, 0xaa, 0x02, 0x15, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x53, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0xca, 0x02, 0x15,
	0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x53, 0x67, 0x65, 0x5c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0xe2, 0x02, 0x21, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5c, 0x53, 0x67, 0x65, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x53, 0x67, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x3a, 0x53, 0x67, 0x65, 0x3a, 0x3a, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sgenetwork_sge_reward_campaign_proto_rawDescOnce sync.Once
	file_sgenetwork_sge_reward_campaign_proto_rawDescData = file_sgenetwork_sge_reward_campaign_proto_rawDesc
)

func file_sgenetwork_sge_reward_campaign_proto_rawDescGZIP() []byte {
	file_sgenetwork_sge_reward_campaign_proto_rawDescOnce.Do(func() {
		file_sgenetwork_sge_reward_campaign_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgenetwork_sge_reward_campaign_proto_rawDescData)
	})
	return file_sgenetwork_sge_reward_campaign_proto_rawDescData
}

var file_sgenetwork_sge_reward_campaign_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sgenetwork_sge_reward_campaign_proto_goTypes = []interface{}{
	(*Campaign)(nil),            // 0: sgenetwork.sge.reward.Campaign
	(*Pool)(nil),                // 1: sgenetwork.sge.reward.Pool
	(*CampaignConstraints)(nil), // 2: sgenetwork.sge.reward.CampaignConstraints
	(RewardCategory)(0),         // 3: sgenetwork.sge.reward.RewardCategory
	(RewardType)(0),             // 4: sgenetwork.sge.reward.RewardType
	(RewardAmountType)(0),       // 5: sgenetwork.sge.reward.RewardAmountType
	(*RewardAmount)(nil),        // 6: sgenetwork.sge.reward.RewardAmount
}
var file_sgenetwork_sge_reward_campaign_proto_depIdxs = []int32{
	3, // 0: sgenetwork.sge.reward.Campaign.reward_category:type_name -> sgenetwork.sge.reward.RewardCategory
	4, // 1: sgenetwork.sge.reward.Campaign.reward_type:type_name -> sgenetwork.sge.reward.RewardType
	5, // 2: sgenetwork.sge.reward.Campaign.reward_amount_type:type_name -> sgenetwork.sge.reward.RewardAmountType
	6, // 3: sgenetwork.sge.reward.Campaign.reward_amount:type_name -> sgenetwork.sge.reward.RewardAmount
	1, // 4: sgenetwork.sge.reward.Campaign.pool:type_name -> sgenetwork.sge.reward.Pool
	2, // 5: sgenetwork.sge.reward.Campaign.constraints:type_name -> sgenetwork.sge.reward.CampaignConstraints
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sgenetwork_sge_reward_campaign_proto_init() }
func file_sgenetwork_sge_reward_campaign_proto_init() {
	if File_sgenetwork_sge_reward_campaign_proto != nil {
		return
	}
	file_sgenetwork_sge_reward_reward_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sgenetwork_sge_reward_campaign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_reward_campaign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_reward_campaign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampaignConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgenetwork_sge_reward_campaign_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sgenetwork_sge_reward_campaign_proto_goTypes,
		DependencyIndexes: file_sgenetwork_sge_reward_campaign_proto_depIdxs,
		MessageInfos:      file_sgenetwork_sge_reward_campaign_proto_msgTypes,
	}.Build()
	File_sgenetwork_sge_reward_campaign_proto = out.File
	file_sgenetwork_sge_reward_campaign_proto_rawDesc = nil
	file_sgenetwork_sge_reward_campaign_proto_goTypes = nil
	file_sgenetwork_sge_reward_campaign_proto_depIdxs = nil
}
