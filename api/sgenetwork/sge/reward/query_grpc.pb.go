// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sgenetwork/sge/reward/query.proto

package reward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Params_FullMethodName                      = "/sgenetwork.sge.reward.Query/Params"
	Query_PromoterByAddress_FullMethodName           = "/sgenetwork.sge.reward.Query/PromoterByAddress"
	Query_Promoters_FullMethodName                   = "/sgenetwork.sge.reward.Query/Promoters"
	Query_Campaign_FullMethodName                    = "/sgenetwork.sge.reward.Query/Campaign"
	Query_Campaigns_FullMethodName                   = "/sgenetwork.sge.reward.Query/Campaigns"
	Query_Reward_FullMethodName                      = "/sgenetwork.sge.reward.Query/Reward"
	Query_Rewards_FullMethodName                     = "/sgenetwork.sge.reward.Query/Rewards"
	Query_RewardsByAddress_FullMethodName            = "/sgenetwork.sge.reward.Query/RewardsByAddress"
	Query_RewardsByAddressAndCategory_FullMethodName = "/sgenetwork.sge.reward.Query/RewardsByAddressAndCategory"
	Query_RewardsByCampaign_FullMethodName           = "/sgenetwork.sge.reward.Query/RewardsByCampaign"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// PromoterByAddress queries a certain promoter.
	PromoterByAddress(ctx context.Context, in *QueryPromoterByAddressRequest, opts ...grpc.CallOption) (*QueryPromoterByAddressResponse, error)
	// Queries list of all Promoter items.
	Promoters(ctx context.Context, in *QueryPromotersRequest, opts ...grpc.CallOption) (*QueryPromotersResponse, error)
	// Queries a specific Campaign item.
	Campaign(ctx context.Context, in *QueryCampaignRequest, opts ...grpc.CallOption) (*QueryCampaignResponse, error)
	// Queries list of all Campaign items.
	Campaigns(ctx context.Context, in *QueryCampaignsRequest, opts ...grpc.CallOption) (*QueryCampaignsResponse, error)
	// Queries a specific Reward item
	Reward(ctx context.Context, in *QueryRewardRequest, opts ...grpc.CallOption) (*QueryRewardResponse, error)
	// Queries list of all Reward items.
	Rewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error)
	// Queries list of all Reward items by user address.
	RewardsByAddress(ctx context.Context, in *QueryRewardsByAddressRequest, opts ...grpc.CallOption) (*QueryRewardsByAddressResponse, error)
	// Queries list of all Reward items by user address and reward type
	// endpoint.
	RewardsByAddressAndCategory(ctx context.Context, in *QueryRewardsByAddressAndCategoryRequest, opts ...grpc.CallOption) (*QueryRewardsByAddressAndCategoryResponse, error)
	// Queries list of all Reward items by campaign endpoint.
	RewardsByCampaign(ctx context.Context, in *QueryRewardsByCampaignRequest, opts ...grpc.CallOption) (*QueryRewardsByCampaignResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PromoterByAddress(ctx context.Context, in *QueryPromoterByAddressRequest, opts ...grpc.CallOption) (*QueryPromoterByAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPromoterByAddressResponse)
	err := c.cc.Invoke(ctx, Query_PromoterByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Promoters(ctx context.Context, in *QueryPromotersRequest, opts ...grpc.CallOption) (*QueryPromotersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPromotersResponse)
	err := c.cc.Invoke(ctx, Query_Promoters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Campaign(ctx context.Context, in *QueryCampaignRequest, opts ...grpc.CallOption) (*QueryCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCampaignResponse)
	err := c.cc.Invoke(ctx, Query_Campaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Campaigns(ctx context.Context, in *QueryCampaignsRequest, opts ...grpc.CallOption) (*QueryCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCampaignsResponse)
	err := c.cc.Invoke(ctx, Query_Campaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reward(ctx context.Context, in *QueryRewardRequest, opts ...grpc.CallOption) (*QueryRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardResponse)
	err := c.cc.Invoke(ctx, Query_Reward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardsResponse)
	err := c.cc.Invoke(ctx, Query_Rewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByAddress(ctx context.Context, in *QueryRewardsByAddressRequest, opts ...grpc.CallOption) (*QueryRewardsByAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_RewardsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByAddressAndCategory(ctx context.Context, in *QueryRewardsByAddressAndCategoryRequest, opts ...grpc.CallOption) (*QueryRewardsByAddressAndCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardsByAddressAndCategoryResponse)
	err := c.cc.Invoke(ctx, Query_RewardsByAddressAndCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsByCampaign(ctx context.Context, in *QueryRewardsByCampaignRequest, opts ...grpc.CallOption) (*QueryRewardsByCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardsByCampaignResponse)
	err := c.cc.Invoke(ctx, Query_RewardsByCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// PromoterByAddress queries a certain promoter.
	PromoterByAddress(context.Context, *QueryPromoterByAddressRequest) (*QueryPromoterByAddressResponse, error)
	// Queries list of all Promoter items.
	Promoters(context.Context, *QueryPromotersRequest) (*QueryPromotersResponse, error)
	// Queries a specific Campaign item.
	Campaign(context.Context, *QueryCampaignRequest) (*QueryCampaignResponse, error)
	// Queries list of all Campaign items.
	Campaigns(context.Context, *QueryCampaignsRequest) (*QueryCampaignsResponse, error)
	// Queries a specific Reward item
	Reward(context.Context, *QueryRewardRequest) (*QueryRewardResponse, error)
	// Queries list of all Reward items.
	Rewards(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error)
	// Queries list of all Reward items by user address.
	RewardsByAddress(context.Context, *QueryRewardsByAddressRequest) (*QueryRewardsByAddressResponse, error)
	// Queries list of all Reward items by user address and reward type
	// endpoint.
	RewardsByAddressAndCategory(context.Context, *QueryRewardsByAddressAndCategoryRequest) (*QueryRewardsByAddressAndCategoryResponse, error)
	// Queries list of all Reward items by campaign endpoint.
	RewardsByCampaign(context.Context, *QueryRewardsByCampaignRequest) (*QueryRewardsByCampaignResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) PromoterByAddress(context.Context, *QueryPromoterByAddressRequest) (*QueryPromoterByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoterByAddress not implemented")
}
func (UnimplementedQueryServer) Promoters(context.Context, *QueryPromotersRequest) (*QueryPromotersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promoters not implemented")
}
func (UnimplementedQueryServer) Campaign(context.Context, *QueryCampaignRequest) (*QueryCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaign not implemented")
}
func (UnimplementedQueryServer) Campaigns(context.Context, *QueryCampaignsRequest) (*QueryCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaigns not implemented")
}
func (UnimplementedQueryServer) Reward(context.Context, *QueryRewardRequest) (*QueryRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reward not implemented")
}
func (UnimplementedQueryServer) Rewards(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewards not implemented")
}
func (UnimplementedQueryServer) RewardsByAddress(context.Context, *QueryRewardsByAddressRequest) (*QueryRewardsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByAddress not implemented")
}
func (UnimplementedQueryServer) RewardsByAddressAndCategory(context.Context, *QueryRewardsByAddressAndCategoryRequest) (*QueryRewardsByAddressAndCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByAddressAndCategory not implemented")
}
func (UnimplementedQueryServer) RewardsByCampaign(context.Context, *QueryRewardsByCampaignRequest) (*QueryRewardsByCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsByCampaign not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PromoterByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPromoterByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PromoterByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PromoterByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PromoterByAddress(ctx, req.(*QueryPromoterByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Promoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPromotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Promoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Promoters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Promoters(ctx, req.(*QueryPromotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Campaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Campaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Campaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Campaign(ctx, req.(*QueryCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Campaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Campaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Campaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Campaigns(ctx, req.(*QueryCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Reward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reward(ctx, req.(*QueryRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Rewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rewards(ctx, req.(*QueryRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByAddress(ctx, req.(*QueryRewardsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByAddressAndCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByAddressAndCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByAddressAndCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsByAddressAndCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByAddressAndCategory(ctx, req.(*QueryRewardsByAddressAndCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsByCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsByCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsByCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsByCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsByCampaign(ctx, req.(*QueryRewardsByCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sgenetwork.sge.reward.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PromoterByAddress",
			Handler:    _Query_PromoterByAddress_Handler,
		},
		{
			MethodName: "Promoters",
			Handler:    _Query_Promoters_Handler,
		},
		{
			MethodName: "Campaign",
			Handler:    _Query_Campaign_Handler,
		},
		{
			MethodName: "Campaigns",
			Handler:    _Query_Campaigns_Handler,
		},
		{
			MethodName: "Reward",
			Handler:    _Query_Reward_Handler,
		},
		{
			MethodName: "Rewards",
			Handler:    _Query_Rewards_Handler,
		},
		{
			MethodName: "RewardsByAddress",
			Handler:    _Query_RewardsByAddress_Handler,
		},
		{
			MethodName: "RewardsByAddressAndCategory",
			Handler:    _Query_RewardsByAddressAndCategory_Handler,
		},
		{
			MethodName: "RewardsByCampaign",
			Handler:    _Query_RewardsByCampaign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgenetwork/sge/reward/query.proto",
}
