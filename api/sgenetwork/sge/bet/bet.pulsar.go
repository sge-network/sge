// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bet

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Bet_14_list)(nil)

type _Bet_14_list struct {
	list *[]*BetFulfillment
}

func (x *_Bet_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Bet_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Bet_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BetFulfillment)
	(*x.list)[i] = concreteValue
}

func (x *_Bet_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BetFulfillment)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Bet_14_list) AppendMutable() protoreflect.Value {
	v := new(BetFulfillment)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bet_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Bet_14_list) NewElement() protoreflect.Value {
	v := new(BetFulfillment)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bet_14_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Bet                     protoreflect.MessageDescriptor
	fd_Bet_uid                 protoreflect.FieldDescriptor
	fd_Bet_market_uid          protoreflect.FieldDescriptor
	fd_Bet_odds_uid            protoreflect.FieldDescriptor
	fd_Bet_odds_value          protoreflect.FieldDescriptor
	fd_Bet_amount              protoreflect.FieldDescriptor
	fd_Bet_fee                 protoreflect.FieldDescriptor
	fd_Bet_status              protoreflect.FieldDescriptor
	fd_Bet_result              protoreflect.FieldDescriptor
	fd_Bet_creator             protoreflect.FieldDescriptor
	fd_Bet_created_at          protoreflect.FieldDescriptor
	fd_Bet_settlement_height   protoreflect.FieldDescriptor
	fd_Bet_max_loss_multiplier protoreflect.FieldDescriptor
	fd_Bet_bet_fulfillment     protoreflect.FieldDescriptor
	fd_Bet_meta                protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_bet_bet_proto_init()
	md_Bet = File_sgenetwork_sge_bet_bet_proto.Messages().ByName("Bet")
	fd_Bet_uid = md_Bet.Fields().ByName("uid")
	fd_Bet_market_uid = md_Bet.Fields().ByName("market_uid")
	fd_Bet_odds_uid = md_Bet.Fields().ByName("odds_uid")
	fd_Bet_odds_value = md_Bet.Fields().ByName("odds_value")
	fd_Bet_amount = md_Bet.Fields().ByName("amount")
	fd_Bet_fee = md_Bet.Fields().ByName("fee")
	fd_Bet_status = md_Bet.Fields().ByName("status")
	fd_Bet_result = md_Bet.Fields().ByName("result")
	fd_Bet_creator = md_Bet.Fields().ByName("creator")
	fd_Bet_created_at = md_Bet.Fields().ByName("created_at")
	fd_Bet_settlement_height = md_Bet.Fields().ByName("settlement_height")
	fd_Bet_max_loss_multiplier = md_Bet.Fields().ByName("max_loss_multiplier")
	fd_Bet_bet_fulfillment = md_Bet.Fields().ByName("bet_fulfillment")
	fd_Bet_meta = md_Bet.Fields().ByName("meta")
}

var _ protoreflect.Message = (*fastReflection_Bet)(nil)

type fastReflection_Bet Bet

func (x *Bet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Bet)(x)
}

func (x *Bet) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Bet_messageType fastReflection_Bet_messageType
var _ protoreflect.MessageType = fastReflection_Bet_messageType{}

type fastReflection_Bet_messageType struct{}

func (x fastReflection_Bet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Bet)(nil)
}
func (x fastReflection_Bet_messageType) New() protoreflect.Message {
	return new(fastReflection_Bet)
}
func (x fastReflection_Bet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Bet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Bet) Descriptor() protoreflect.MessageDescriptor {
	return md_Bet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Bet) Type() protoreflect.MessageType {
	return _fastReflection_Bet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Bet) New() protoreflect.Message {
	return new(fastReflection_Bet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Bet) Interface() protoreflect.ProtoMessage {
	return (*Bet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Bet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_Bet_uid, value) {
			return
		}
	}
	if x.MarketUid != "" {
		value := protoreflect.ValueOfString(x.MarketUid)
		if !f(fd_Bet_market_uid, value) {
			return
		}
	}
	if x.OddsUid != "" {
		value := protoreflect.ValueOfString(x.OddsUid)
		if !f(fd_Bet_odds_uid, value) {
			return
		}
	}
	if x.OddsValue != "" {
		value := protoreflect.ValueOfString(x.OddsValue)
		if !f(fd_Bet_odds_value, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_Bet_amount, value) {
			return
		}
	}
	if x.Fee != "" {
		value := protoreflect.ValueOfString(x.Fee)
		if !f(fd_Bet_fee, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Bet_status, value) {
			return
		}
	}
	if x.Result != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Result))
		if !f(fd_Bet_result, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Bet_creator, value) {
			return
		}
	}
	if x.CreatedAt != int64(0) {
		value := protoreflect.ValueOfInt64(x.CreatedAt)
		if !f(fd_Bet_created_at, value) {
			return
		}
	}
	if x.SettlementHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.SettlementHeight)
		if !f(fd_Bet_settlement_height, value) {
			return
		}
	}
	if x.MaxLossMultiplier != "" {
		value := protoreflect.ValueOfString(x.MaxLossMultiplier)
		if !f(fd_Bet_max_loss_multiplier, value) {
			return
		}
	}
	if len(x.BetFulfillment) != 0 {
		value := protoreflect.ValueOfList(&_Bet_14_list{list: &x.BetFulfillment})
		if !f(fd_Bet_bet_fulfillment, value) {
			return
		}
	}
	if x.Meta != nil {
		value := protoreflect.ValueOfMessage(x.Meta.ProtoReflect())
		if !f(fd_Bet_meta, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Bet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.Bet.uid":
		return x.Uid != ""
	case "sgenetwork.sge.bet.Bet.market_uid":
		return x.MarketUid != ""
	case "sgenetwork.sge.bet.Bet.odds_uid":
		return x.OddsUid != ""
	case "sgenetwork.sge.bet.Bet.odds_value":
		return x.OddsValue != ""
	case "sgenetwork.sge.bet.Bet.amount":
		return x.Amount != ""
	case "sgenetwork.sge.bet.Bet.fee":
		return x.Fee != ""
	case "sgenetwork.sge.bet.Bet.status":
		return x.Status != 0
	case "sgenetwork.sge.bet.Bet.result":
		return x.Result != 0
	case "sgenetwork.sge.bet.Bet.creator":
		return x.Creator != ""
	case "sgenetwork.sge.bet.Bet.created_at":
		return x.CreatedAt != int64(0)
	case "sgenetwork.sge.bet.Bet.settlement_height":
		return x.SettlementHeight != int64(0)
	case "sgenetwork.sge.bet.Bet.max_loss_multiplier":
		return x.MaxLossMultiplier != ""
	case "sgenetwork.sge.bet.Bet.bet_fulfillment":
		return len(x.BetFulfillment) != 0
	case "sgenetwork.sge.bet.Bet.meta":
		return x.Meta != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.Bet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.Bet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.Bet.uid":
		x.Uid = ""
	case "sgenetwork.sge.bet.Bet.market_uid":
		x.MarketUid = ""
	case "sgenetwork.sge.bet.Bet.odds_uid":
		x.OddsUid = ""
	case "sgenetwork.sge.bet.Bet.odds_value":
		x.OddsValue = ""
	case "sgenetwork.sge.bet.Bet.amount":
		x.Amount = ""
	case "sgenetwork.sge.bet.Bet.fee":
		x.Fee = ""
	case "sgenetwork.sge.bet.Bet.status":
		x.Status = 0
	case "sgenetwork.sge.bet.Bet.result":
		x.Result = 0
	case "sgenetwork.sge.bet.Bet.creator":
		x.Creator = ""
	case "sgenetwork.sge.bet.Bet.created_at":
		x.CreatedAt = int64(0)
	case "sgenetwork.sge.bet.Bet.settlement_height":
		x.SettlementHeight = int64(0)
	case "sgenetwork.sge.bet.Bet.max_loss_multiplier":
		x.MaxLossMultiplier = ""
	case "sgenetwork.sge.bet.Bet.bet_fulfillment":
		x.BetFulfillment = nil
	case "sgenetwork.sge.bet.Bet.meta":
		x.Meta = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.Bet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.Bet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Bet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.bet.Bet.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.market_uid":
		value := x.MarketUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.odds_uid":
		value := x.OddsUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.odds_value":
		value := x.OddsValue
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.fee":
		value := x.Fee
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sgenetwork.sge.bet.Bet.result":
		value := x.Result
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sgenetwork.sge.bet.Bet.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.created_at":
		value := x.CreatedAt
		return protoreflect.ValueOfInt64(value)
	case "sgenetwork.sge.bet.Bet.settlement_height":
		value := x.SettlementHeight
		return protoreflect.ValueOfInt64(value)
	case "sgenetwork.sge.bet.Bet.max_loss_multiplier":
		value := x.MaxLossMultiplier
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.Bet.bet_fulfillment":
		if len(x.BetFulfillment) == 0 {
			return protoreflect.ValueOfList(&_Bet_14_list{})
		}
		listValue := &_Bet_14_list{list: &x.BetFulfillment}
		return protoreflect.ValueOfList(listValue)
	case "sgenetwork.sge.bet.Bet.meta":
		value := x.Meta
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.Bet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.Bet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.Bet.uid":
		x.Uid = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.market_uid":
		x.MarketUid = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.odds_uid":
		x.OddsUid = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.odds_value":
		x.OddsValue = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.amount":
		x.Amount = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.fee":
		x.Fee = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.status":
		x.Status = (Bet_Status)(value.Enum())
	case "sgenetwork.sge.bet.Bet.result":
		x.Result = (Bet_Result)(value.Enum())
	case "sgenetwork.sge.bet.Bet.creator":
		x.Creator = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.created_at":
		x.CreatedAt = value.Int()
	case "sgenetwork.sge.bet.Bet.settlement_height":
		x.SettlementHeight = value.Int()
	case "sgenetwork.sge.bet.Bet.max_loss_multiplier":
		x.MaxLossMultiplier = value.Interface().(string)
	case "sgenetwork.sge.bet.Bet.bet_fulfillment":
		lv := value.List()
		clv := lv.(*_Bet_14_list)
		x.BetFulfillment = *clv.list
	case "sgenetwork.sge.bet.Bet.meta":
		x.Meta = value.Message().Interface().(*MetaData)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.Bet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.Bet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.Bet.bet_fulfillment":
		if x.BetFulfillment == nil {
			x.BetFulfillment = []*BetFulfillment{}
		}
		value := &_Bet_14_list{list: &x.BetFulfillment}
		return protoreflect.ValueOfList(value)
	case "sgenetwork.sge.bet.Bet.meta":
		if x.Meta == nil {
			x.Meta = new(MetaData)
		}
		return protoreflect.ValueOfMessage(x.Meta.ProtoReflect())
	case "sgenetwork.sge.bet.Bet.uid":
		panic(fmt.Errorf("field uid of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.market_uid":
		panic(fmt.Errorf("field market_uid of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.odds_uid":
		panic(fmt.Errorf("field odds_uid of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.odds_value":
		panic(fmt.Errorf("field odds_value of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.amount":
		panic(fmt.Errorf("field amount of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.fee":
		panic(fmt.Errorf("field fee of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.status":
		panic(fmt.Errorf("field status of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.result":
		panic(fmt.Errorf("field result of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.creator":
		panic(fmt.Errorf("field creator of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.created_at":
		panic(fmt.Errorf("field created_at of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.settlement_height":
		panic(fmt.Errorf("field settlement_height of message sgenetwork.sge.bet.Bet is not mutable"))
	case "sgenetwork.sge.bet.Bet.max_loss_multiplier":
		panic(fmt.Errorf("field max_loss_multiplier of message sgenetwork.sge.bet.Bet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.Bet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.Bet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Bet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.Bet.uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.market_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.odds_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.odds_value":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.amount":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.fee":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.status":
		return protoreflect.ValueOfEnum(0)
	case "sgenetwork.sge.bet.Bet.result":
		return protoreflect.ValueOfEnum(0)
	case "sgenetwork.sge.bet.Bet.creator":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.created_at":
		return protoreflect.ValueOfInt64(int64(0))
	case "sgenetwork.sge.bet.Bet.settlement_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "sgenetwork.sge.bet.Bet.max_loss_multiplier":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.Bet.bet_fulfillment":
		list := []*BetFulfillment{}
		return protoreflect.ValueOfList(&_Bet_14_list{list: &list})
	case "sgenetwork.sge.bet.Bet.meta":
		m := new(MetaData)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.Bet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.Bet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Bet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.bet.Bet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Bet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Bet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Bet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Bet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MarketUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OddsUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OddsValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Fee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.Result != 0 {
			n += 1 + runtime.Sov(uint64(x.Result))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreatedAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreatedAt))
		}
		if x.SettlementHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.SettlementHeight))
		}
		l = len(x.MaxLossMultiplier)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.BetFulfillment) > 0 {
			for _, e := range x.BetFulfillment {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Meta != nil {
			l = options.Size(x.Meta)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Bet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Meta != nil {
			encoded, err := options.Marshal(x.Meta)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.BetFulfillment) > 0 {
			for iNdEx := len(x.BetFulfillment) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BetFulfillment[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if len(x.MaxLossMultiplier) > 0 {
			i -= len(x.MaxLossMultiplier)
			copy(dAtA[i:], x.MaxLossMultiplier)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxLossMultiplier)))
			i--
			dAtA[i] = 0x6a
		}
		if x.SettlementHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SettlementHeight))
			i--
			dAtA[i] = 0x60
		}
		if x.CreatedAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreatedAt))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x52
		}
		if x.Result != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Result))
			i--
			dAtA[i] = 0x48
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x40
		}
		if len(x.Fee) > 0 {
			i -= len(x.Fee)
			copy(dAtA[i:], x.Fee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Fee)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.OddsValue) > 0 {
			i -= len(x.OddsValue)
			copy(dAtA[i:], x.OddsValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OddsValue)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.OddsUid) > 0 {
			i -= len(x.OddsUid)
			copy(dAtA[i:], x.OddsUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OddsUid)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.MarketUid) > 0 {
			i -= len(x.MarketUid)
			copy(dAtA[i:], x.MarketUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MarketUid)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Bet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Bet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Bet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MarketUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MarketUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OddsUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OddsUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OddsValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OddsValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Fee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= Bet_Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
				}
				x.Result = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Result |= Bet_Result(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
				}
				x.CreatedAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreatedAt |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SettlementHeight", wireType)
				}
				x.SettlementHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SettlementHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxLossMultiplier", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxLossMultiplier = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BetFulfillment", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BetFulfillment = append(x.BetFulfillment, &BetFulfillment{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BetFulfillment[len(x.BetFulfillment)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Meta == nil {
					x.Meta = &MetaData{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Meta); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UID2ID     protoreflect.MessageDescriptor
	fd_UID2ID_uid protoreflect.FieldDescriptor
	fd_UID2ID_id  protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_bet_bet_proto_init()
	md_UID2ID = File_sgenetwork_sge_bet_bet_proto.Messages().ByName("UID2ID")
	fd_UID2ID_uid = md_UID2ID.Fields().ByName("uid")
	fd_UID2ID_id = md_UID2ID.Fields().ByName("id")
}

var _ protoreflect.Message = (*fastReflection_UID2ID)(nil)

type fastReflection_UID2ID UID2ID

func (x *UID2ID) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UID2ID)(x)
}

func (x *UID2ID) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UID2ID_messageType fastReflection_UID2ID_messageType
var _ protoreflect.MessageType = fastReflection_UID2ID_messageType{}

type fastReflection_UID2ID_messageType struct{}

func (x fastReflection_UID2ID_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UID2ID)(nil)
}
func (x fastReflection_UID2ID_messageType) New() protoreflect.Message {
	return new(fastReflection_UID2ID)
}
func (x fastReflection_UID2ID_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UID2ID
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UID2ID) Descriptor() protoreflect.MessageDescriptor {
	return md_UID2ID
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UID2ID) Type() protoreflect.MessageType {
	return _fastReflection_UID2ID_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UID2ID) New() protoreflect.Message {
	return new(fastReflection_UID2ID)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UID2ID) Interface() protoreflect.ProtoMessage {
	return (*UID2ID)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UID2ID) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_UID2ID_uid, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_UID2ID_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UID2ID) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.UID2ID.uid":
		return x.Uid != ""
	case "sgenetwork.sge.bet.UID2ID.id":
		return x.Id != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.UID2ID"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.UID2ID does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UID2ID) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.UID2ID.uid":
		x.Uid = ""
	case "sgenetwork.sge.bet.UID2ID.id":
		x.Id = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.UID2ID"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.UID2ID does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UID2ID) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.bet.UID2ID.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.UID2ID.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.UID2ID"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.UID2ID does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UID2ID) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.UID2ID.uid":
		x.Uid = value.Interface().(string)
	case "sgenetwork.sge.bet.UID2ID.id":
		x.Id = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.UID2ID"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.UID2ID does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UID2ID) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.UID2ID.uid":
		panic(fmt.Errorf("field uid of message sgenetwork.sge.bet.UID2ID is not mutable"))
	case "sgenetwork.sge.bet.UID2ID.id":
		panic(fmt.Errorf("field id of message sgenetwork.sge.bet.UID2ID is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.UID2ID"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.UID2ID does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UID2ID) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.UID2ID.uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.UID2ID.id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.UID2ID"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.UID2ID does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UID2ID) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.bet.UID2ID", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UID2ID) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UID2ID) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UID2ID) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UID2ID) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UID2ID)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UID2ID)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UID2ID)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UID2ID: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UID2ID: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PendingBet         protoreflect.MessageDescriptor
	fd_PendingBet_uid     protoreflect.FieldDescriptor
	fd_PendingBet_creator protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_bet_bet_proto_init()
	md_PendingBet = File_sgenetwork_sge_bet_bet_proto.Messages().ByName("PendingBet")
	fd_PendingBet_uid = md_PendingBet.Fields().ByName("uid")
	fd_PendingBet_creator = md_PendingBet.Fields().ByName("creator")
}

var _ protoreflect.Message = (*fastReflection_PendingBet)(nil)

type fastReflection_PendingBet PendingBet

func (x *PendingBet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PendingBet)(x)
}

func (x *PendingBet) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PendingBet_messageType fastReflection_PendingBet_messageType
var _ protoreflect.MessageType = fastReflection_PendingBet_messageType{}

type fastReflection_PendingBet_messageType struct{}

func (x fastReflection_PendingBet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PendingBet)(nil)
}
func (x fastReflection_PendingBet_messageType) New() protoreflect.Message {
	return new(fastReflection_PendingBet)
}
func (x fastReflection_PendingBet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PendingBet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PendingBet) Descriptor() protoreflect.MessageDescriptor {
	return md_PendingBet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PendingBet) Type() protoreflect.MessageType {
	return _fastReflection_PendingBet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PendingBet) New() protoreflect.Message {
	return new(fastReflection_PendingBet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PendingBet) Interface() protoreflect.ProtoMessage {
	return (*PendingBet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PendingBet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_PendingBet_uid, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_PendingBet_creator, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PendingBet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.PendingBet.uid":
		return x.Uid != ""
	case "sgenetwork.sge.bet.PendingBet.creator":
		return x.Creator != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.PendingBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.PendingBet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingBet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.PendingBet.uid":
		x.Uid = ""
	case "sgenetwork.sge.bet.PendingBet.creator":
		x.Creator = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.PendingBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.PendingBet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PendingBet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.bet.PendingBet.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.PendingBet.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.PendingBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.PendingBet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingBet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.PendingBet.uid":
		x.Uid = value.Interface().(string)
	case "sgenetwork.sge.bet.PendingBet.creator":
		x.Creator = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.PendingBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.PendingBet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingBet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.PendingBet.uid":
		panic(fmt.Errorf("field uid of message sgenetwork.sge.bet.PendingBet is not mutable"))
	case "sgenetwork.sge.bet.PendingBet.creator":
		panic(fmt.Errorf("field creator of message sgenetwork.sge.bet.PendingBet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.PendingBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.PendingBet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PendingBet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.PendingBet.uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.PendingBet.creator":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.PendingBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.PendingBet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PendingBet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.bet.PendingBet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PendingBet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PendingBet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PendingBet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PendingBet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PendingBet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PendingBet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PendingBet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PendingBet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PendingBet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SettledBet                protoreflect.MessageDescriptor
	fd_SettledBet_uid            protoreflect.FieldDescriptor
	fd_SettledBet_bettor_address protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_bet_bet_proto_init()
	md_SettledBet = File_sgenetwork_sge_bet_bet_proto.Messages().ByName("SettledBet")
	fd_SettledBet_uid = md_SettledBet.Fields().ByName("uid")
	fd_SettledBet_bettor_address = md_SettledBet.Fields().ByName("bettor_address")
}

var _ protoreflect.Message = (*fastReflection_SettledBet)(nil)

type fastReflection_SettledBet SettledBet

func (x *SettledBet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SettledBet)(x)
}

func (x *SettledBet) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SettledBet_messageType fastReflection_SettledBet_messageType
var _ protoreflect.MessageType = fastReflection_SettledBet_messageType{}

type fastReflection_SettledBet_messageType struct{}

func (x fastReflection_SettledBet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SettledBet)(nil)
}
func (x fastReflection_SettledBet_messageType) New() protoreflect.Message {
	return new(fastReflection_SettledBet)
}
func (x fastReflection_SettledBet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SettledBet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SettledBet) Descriptor() protoreflect.MessageDescriptor {
	return md_SettledBet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SettledBet) Type() protoreflect.MessageType {
	return _fastReflection_SettledBet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SettledBet) New() protoreflect.Message {
	return new(fastReflection_SettledBet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SettledBet) Interface() protoreflect.ProtoMessage {
	return (*SettledBet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SettledBet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Uid != "" {
		value := protoreflect.ValueOfString(x.Uid)
		if !f(fd_SettledBet_uid, value) {
			return
		}
	}
	if x.BettorAddress != "" {
		value := protoreflect.ValueOfString(x.BettorAddress)
		if !f(fd_SettledBet_bettor_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SettledBet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.SettledBet.uid":
		return x.Uid != ""
	case "sgenetwork.sge.bet.SettledBet.bettor_address":
		return x.BettorAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.SettledBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.SettledBet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledBet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.SettledBet.uid":
		x.Uid = ""
	case "sgenetwork.sge.bet.SettledBet.bettor_address":
		x.BettorAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.SettledBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.SettledBet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SettledBet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.bet.SettledBet.uid":
		value := x.Uid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.SettledBet.bettor_address":
		value := x.BettorAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.SettledBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.SettledBet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledBet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.SettledBet.uid":
		x.Uid = value.Interface().(string)
	case "sgenetwork.sge.bet.SettledBet.bettor_address":
		x.BettorAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.SettledBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.SettledBet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledBet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.SettledBet.uid":
		panic(fmt.Errorf("field uid of message sgenetwork.sge.bet.SettledBet is not mutable"))
	case "sgenetwork.sge.bet.SettledBet.bettor_address":
		panic(fmt.Errorf("field bettor_address of message sgenetwork.sge.bet.SettledBet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.SettledBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.SettledBet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SettledBet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.SettledBet.uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.SettledBet.bettor_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.SettledBet"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.SettledBet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SettledBet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.bet.SettledBet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SettledBet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledBet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SettledBet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SettledBet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SettledBet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Uid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BettorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SettledBet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BettorAddress) > 0 {
			i -= len(x.BettorAddress)
			copy(dAtA[i:], x.BettorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BettorAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Uid) > 0 {
			i -= len(x.Uid)
			copy(dAtA[i:], x.Uid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Uid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SettledBet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SettledBet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SettledBet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Uid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BettorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BettorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BetFulfillment                     protoreflect.MessageDescriptor
	fd_BetFulfillment_participant_address protoreflect.FieldDescriptor
	fd_BetFulfillment_participation_index protoreflect.FieldDescriptor
	fd_BetFulfillment_bet_amount          protoreflect.FieldDescriptor
	fd_BetFulfillment_payout_profit       protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_bet_bet_proto_init()
	md_BetFulfillment = File_sgenetwork_sge_bet_bet_proto.Messages().ByName("BetFulfillment")
	fd_BetFulfillment_participant_address = md_BetFulfillment.Fields().ByName("participant_address")
	fd_BetFulfillment_participation_index = md_BetFulfillment.Fields().ByName("participation_index")
	fd_BetFulfillment_bet_amount = md_BetFulfillment.Fields().ByName("bet_amount")
	fd_BetFulfillment_payout_profit = md_BetFulfillment.Fields().ByName("payout_profit")
}

var _ protoreflect.Message = (*fastReflection_BetFulfillment)(nil)

type fastReflection_BetFulfillment BetFulfillment

func (x *BetFulfillment) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BetFulfillment)(x)
}

func (x *BetFulfillment) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BetFulfillment_messageType fastReflection_BetFulfillment_messageType
var _ protoreflect.MessageType = fastReflection_BetFulfillment_messageType{}

type fastReflection_BetFulfillment_messageType struct{}

func (x fastReflection_BetFulfillment_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BetFulfillment)(nil)
}
func (x fastReflection_BetFulfillment_messageType) New() protoreflect.Message {
	return new(fastReflection_BetFulfillment)
}
func (x fastReflection_BetFulfillment_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BetFulfillment
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BetFulfillment) Descriptor() protoreflect.MessageDescriptor {
	return md_BetFulfillment
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BetFulfillment) Type() protoreflect.MessageType {
	return _fastReflection_BetFulfillment_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BetFulfillment) New() protoreflect.Message {
	return new(fastReflection_BetFulfillment)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BetFulfillment) Interface() protoreflect.ProtoMessage {
	return (*BetFulfillment)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BetFulfillment) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ParticipantAddress != "" {
		value := protoreflect.ValueOfString(x.ParticipantAddress)
		if !f(fd_BetFulfillment_participant_address, value) {
			return
		}
	}
	if x.ParticipationIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParticipationIndex)
		if !f(fd_BetFulfillment_participation_index, value) {
			return
		}
	}
	if x.BetAmount != "" {
		value := protoreflect.ValueOfString(x.BetAmount)
		if !f(fd_BetFulfillment_bet_amount, value) {
			return
		}
	}
	if x.PayoutProfit != "" {
		value := protoreflect.ValueOfString(x.PayoutProfit)
		if !f(fd_BetFulfillment_payout_profit, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BetFulfillment) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.BetFulfillment.participant_address":
		return x.ParticipantAddress != ""
	case "sgenetwork.sge.bet.BetFulfillment.participation_index":
		return x.ParticipationIndex != uint64(0)
	case "sgenetwork.sge.bet.BetFulfillment.bet_amount":
		return x.BetAmount != ""
	case "sgenetwork.sge.bet.BetFulfillment.payout_profit":
		return x.PayoutProfit != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.BetFulfillment"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.BetFulfillment does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BetFulfillment) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.BetFulfillment.participant_address":
		x.ParticipantAddress = ""
	case "sgenetwork.sge.bet.BetFulfillment.participation_index":
		x.ParticipationIndex = uint64(0)
	case "sgenetwork.sge.bet.BetFulfillment.bet_amount":
		x.BetAmount = ""
	case "sgenetwork.sge.bet.BetFulfillment.payout_profit":
		x.PayoutProfit = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.BetFulfillment"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.BetFulfillment does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BetFulfillment) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.bet.BetFulfillment.participant_address":
		value := x.ParticipantAddress
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.BetFulfillment.participation_index":
		value := x.ParticipationIndex
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.bet.BetFulfillment.bet_amount":
		value := x.BetAmount
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.BetFulfillment.payout_profit":
		value := x.PayoutProfit
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.BetFulfillment"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.BetFulfillment does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BetFulfillment) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.BetFulfillment.participant_address":
		x.ParticipantAddress = value.Interface().(string)
	case "sgenetwork.sge.bet.BetFulfillment.participation_index":
		x.ParticipationIndex = value.Uint()
	case "sgenetwork.sge.bet.BetFulfillment.bet_amount":
		x.BetAmount = value.Interface().(string)
	case "sgenetwork.sge.bet.BetFulfillment.payout_profit":
		x.PayoutProfit = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.BetFulfillment"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.BetFulfillment does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BetFulfillment) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.BetFulfillment.participant_address":
		panic(fmt.Errorf("field participant_address of message sgenetwork.sge.bet.BetFulfillment is not mutable"))
	case "sgenetwork.sge.bet.BetFulfillment.participation_index":
		panic(fmt.Errorf("field participation_index of message sgenetwork.sge.bet.BetFulfillment is not mutable"))
	case "sgenetwork.sge.bet.BetFulfillment.bet_amount":
		panic(fmt.Errorf("field bet_amount of message sgenetwork.sge.bet.BetFulfillment is not mutable"))
	case "sgenetwork.sge.bet.BetFulfillment.payout_profit":
		panic(fmt.Errorf("field payout_profit of message sgenetwork.sge.bet.BetFulfillment is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.BetFulfillment"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.BetFulfillment does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BetFulfillment) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.BetFulfillment.participant_address":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.BetFulfillment.participation_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.bet.BetFulfillment.bet_amount":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.BetFulfillment.payout_profit":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.BetFulfillment"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.BetFulfillment does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BetFulfillment) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.bet.BetFulfillment", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BetFulfillment) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BetFulfillment) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BetFulfillment) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BetFulfillment) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BetFulfillment)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ParticipantAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParticipationIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.ParticipationIndex))
		}
		l = len(x.BetAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PayoutProfit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BetFulfillment)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PayoutProfit) > 0 {
			i -= len(x.PayoutProfit)
			copy(dAtA[i:], x.PayoutProfit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PayoutProfit)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.BetAmount) > 0 {
			i -= len(x.BetAmount)
			copy(dAtA[i:], x.BetAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BetAmount)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ParticipationIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParticipationIndex))
			i--
			dAtA[i] = 0x10
		}
		if len(x.ParticipantAddress) > 0 {
			i -= len(x.ParticipantAddress)
			copy(dAtA[i:], x.ParticipantAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParticipantAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BetFulfillment)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BetFulfillment: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BetFulfillment: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParticipantAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
				}
				x.ParticipationIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParticipationIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BetAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PayoutProfit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PayoutProfit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MetaData                     protoreflect.MessageDescriptor
	fd_MetaData_selected_odds_type  protoreflect.FieldDescriptor
	fd_MetaData_selected_odds_value protoreflect.FieldDescriptor
	fd_MetaData_is_main_market      protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_bet_bet_proto_init()
	md_MetaData = File_sgenetwork_sge_bet_bet_proto.Messages().ByName("MetaData")
	fd_MetaData_selected_odds_type = md_MetaData.Fields().ByName("selected_odds_type")
	fd_MetaData_selected_odds_value = md_MetaData.Fields().ByName("selected_odds_value")
	fd_MetaData_is_main_market = md_MetaData.Fields().ByName("is_main_market")
}

var _ protoreflect.Message = (*fastReflection_MetaData)(nil)

type fastReflection_MetaData MetaData

func (x *MetaData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MetaData)(x)
}

func (x *MetaData) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MetaData_messageType fastReflection_MetaData_messageType
var _ protoreflect.MessageType = fastReflection_MetaData_messageType{}

type fastReflection_MetaData_messageType struct{}

func (x fastReflection_MetaData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MetaData)(nil)
}
func (x fastReflection_MetaData_messageType) New() protoreflect.Message {
	return new(fastReflection_MetaData)
}
func (x fastReflection_MetaData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MetaData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MetaData) Descriptor() protoreflect.MessageDescriptor {
	return md_MetaData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MetaData) Type() protoreflect.MessageType {
	return _fastReflection_MetaData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MetaData) New() protoreflect.Message {
	return new(fastReflection_MetaData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MetaData) Interface() protoreflect.ProtoMessage {
	return (*MetaData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MetaData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SelectedOddsType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.SelectedOddsType))
		if !f(fd_MetaData_selected_odds_type, value) {
			return
		}
	}
	if x.SelectedOddsValue != "" {
		value := protoreflect.ValueOfString(x.SelectedOddsValue)
		if !f(fd_MetaData_selected_odds_value, value) {
			return
		}
	}
	if x.IsMainMarket != false {
		value := protoreflect.ValueOfBool(x.IsMainMarket)
		if !f(fd_MetaData_is_main_market, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MetaData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.MetaData.selected_odds_type":
		return x.SelectedOddsType != 0
	case "sgenetwork.sge.bet.MetaData.selected_odds_value":
		return x.SelectedOddsValue != ""
	case "sgenetwork.sge.bet.MetaData.is_main_market":
		return x.IsMainMarket != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.MetaData"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.MetaData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MetaData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.MetaData.selected_odds_type":
		x.SelectedOddsType = 0
	case "sgenetwork.sge.bet.MetaData.selected_odds_value":
		x.SelectedOddsValue = ""
	case "sgenetwork.sge.bet.MetaData.is_main_market":
		x.IsMainMarket = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.MetaData"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.MetaData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MetaData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.bet.MetaData.selected_odds_type":
		value := x.SelectedOddsType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "sgenetwork.sge.bet.MetaData.selected_odds_value":
		value := x.SelectedOddsValue
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.bet.MetaData.is_main_market":
		value := x.IsMainMarket
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.MetaData"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.MetaData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MetaData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.MetaData.selected_odds_type":
		x.SelectedOddsType = (OddsType)(value.Enum())
	case "sgenetwork.sge.bet.MetaData.selected_odds_value":
		x.SelectedOddsValue = value.Interface().(string)
	case "sgenetwork.sge.bet.MetaData.is_main_market":
		x.IsMainMarket = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.MetaData"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.MetaData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MetaData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.MetaData.selected_odds_type":
		panic(fmt.Errorf("field selected_odds_type of message sgenetwork.sge.bet.MetaData is not mutable"))
	case "sgenetwork.sge.bet.MetaData.selected_odds_value":
		panic(fmt.Errorf("field selected_odds_value of message sgenetwork.sge.bet.MetaData is not mutable"))
	case "sgenetwork.sge.bet.MetaData.is_main_market":
		panic(fmt.Errorf("field is_main_market of message sgenetwork.sge.bet.MetaData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.MetaData"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.MetaData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MetaData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.bet.MetaData.selected_odds_type":
		return protoreflect.ValueOfEnum(0)
	case "sgenetwork.sge.bet.MetaData.selected_odds_value":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.bet.MetaData.is_main_market":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.bet.MetaData"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.bet.MetaData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MetaData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.bet.MetaData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MetaData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MetaData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MetaData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MetaData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MetaData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.SelectedOddsType != 0 {
			n += 1 + runtime.Sov(uint64(x.SelectedOddsType))
		}
		l = len(x.SelectedOddsValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsMainMarket {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MetaData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsMainMarket {
			i--
			if x.IsMainMarket {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.SelectedOddsValue) > 0 {
			i -= len(x.SelectedOddsValue)
			copy(dAtA[i:], x.SelectedOddsValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SelectedOddsValue)))
			i--
			dAtA[i] = 0x12
		}
		if x.SelectedOddsType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SelectedOddsType))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MetaData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MetaData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MetaData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SelectedOddsType", wireType)
				}
				x.SelectedOddsType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SelectedOddsType |= OddsType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SelectedOddsValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SelectedOddsValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsMainMarket", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsMainMarket = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sgenetwork/sge/bet/bet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of the Bet.
type Bet_Status int32

const (
	// the invalid or unknown
	Bet_STATUS_UNSPECIFIED Bet_Status = 0
	// bet is placed
	Bet_STATUS_PLACED Bet_Status = 1
	// bet is canceled by Bettor
	Bet_STATUS_CANCELED Bet_Status = 2
	// bet is aborted
	Bet_STATUS_ABORTED Bet_Status = 3
	// bet is pending for getting placed
	Bet_STATUS_PENDING Bet_Status = 4
	// bet result is declared
	Bet_STATUS_RESULT_DECLARED Bet_Status = 5
	// the bet is settled
	Bet_STATUS_SETTLED Bet_Status = 6
)

// Enum value maps for Bet_Status.
var (
	Bet_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PLACED",
		2: "STATUS_CANCELED",
		3: "STATUS_ABORTED",
		4: "STATUS_PENDING",
		5: "STATUS_RESULT_DECLARED",
		6: "STATUS_SETTLED",
	}
	Bet_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":     0,
		"STATUS_PLACED":          1,
		"STATUS_CANCELED":        2,
		"STATUS_ABORTED":         3,
		"STATUS_PENDING":         4,
		"STATUS_RESULT_DECLARED": 5,
		"STATUS_SETTLED":         6,
	}
)

func (x Bet_Status) Enum() *Bet_Status {
	p := new(Bet_Status)
	*p = x
	return p
}

func (x Bet_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bet_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_sgenetwork_sge_bet_bet_proto_enumTypes[0].Descriptor()
}

func (Bet_Status) Type() protoreflect.EnumType {
	return &file_sgenetwork_sge_bet_bet_proto_enumTypes[0]
}

func (x Bet_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bet_Status.Descriptor instead.
func (Bet_Status) EnumDescriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{0, 0}
}

// Result of the bet.
type Bet_Result int32

const (
	// the invalid or unknown
	Bet_RESULT_UNSPECIFIED Bet_Result = 0
	// bet result is pending
	Bet_RESULT_PENDING Bet_Result = 1
	// bet won by the bettor
	Bet_RESULT_WON Bet_Result = 2
	// bet lost by the bettor
	Bet_RESULT_LOST Bet_Result = 3
	// bet is refunded
	Bet_RESULT_REFUNDED Bet_Result = 4
)

// Enum value maps for Bet_Result.
var (
	Bet_Result_name = map[int32]string{
		0: "RESULT_UNSPECIFIED",
		1: "RESULT_PENDING",
		2: "RESULT_WON",
		3: "RESULT_LOST",
		4: "RESULT_REFUNDED",
	}
	Bet_Result_value = map[string]int32{
		"RESULT_UNSPECIFIED": 0,
		"RESULT_PENDING":     1,
		"RESULT_WON":         2,
		"RESULT_LOST":        3,
		"RESULT_REFUNDED":    4,
	}
)

func (x Bet_Result) Enum() *Bet_Result {
	p := new(Bet_Result)
	*p = x
	return p
}

func (x Bet_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bet_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_sgenetwork_sge_bet_bet_proto_enumTypes[1].Descriptor()
}

func (Bet_Result) Type() protoreflect.EnumType {
	return &file_sgenetwork_sge_bet_bet_proto_enumTypes[1]
}

func (x Bet_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bet_Result.Descriptor instead.
func (Bet_Result) EnumDescriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{0, 1}
}

// Bet is the transaction order placed by a bettor on a specific event and odd
type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the universal unique identifier assigned to a bet.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// market_uid is the universal unique identifier of
	// the market on which the bet is placed.
	MarketUid string `protobuf:"bytes,2,opt,name=market_uid,proto3" json:"market_uid,omitempty"`
	// odds_uid is the universal unique identifier,
	// of the odds on which the bet is placed.
	OddsUid string `protobuf:"bytes,3,opt,name=odds_uid,proto3" json:"odds_uid,omitempty"`
	// odds_value is the odds on which the bet is placed.
	OddsValue string `protobuf:"bytes,5,opt,name=odds_value,json=oddsValue,proto3" json:"odds_value,omitempty"`
	// amount is the wager amount.
	Amount string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// fee is the betting fee user needs to pay for placing a bet
	Fee string `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	// status is the status of the bet, such as `unspecified` or `settled`.
	Status Bet_Status `protobuf:"varint,8,opt,name=status,proto3,enum=sgenetwork.sge.bet.Bet_Status" json:"status,omitempty"`
	// result is the result of the bet, such as `won` or `lost`.
	Result Bet_Result `protobuf:"varint,9,opt,name=result,proto3,enum=sgenetwork.sge.bet.Bet_Result" json:"result,omitempty"`
	// creator is the bettor address.
	Creator string `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
	// created_at is the bet placement timestamp.
	CreatedAt int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// settlement_height is the block height at which the bet is settled.
	SettlementHeight int64 `protobuf:"varint,12,opt,name=settlement_height,json=settlementHeight,proto3" json:"settlement_height,omitempty"`
	// max_loss_multiplier is the multiplier coefficient of max loss.
	MaxLossMultiplier string `protobuf:"bytes,13,opt,name=max_loss_multiplier,json=maxLossMultiplier,proto3" json:"max_loss_multiplier,omitempty"`
	// bet_fulfillment is the fulfillment data.
	BetFulfillment []*BetFulfillment `protobuf:"bytes,14,rep,name=bet_fulfillment,json=betFulfillment,proto3" json:"bet_fulfillment,omitempty"`
	// meta is metadata for bet
	Meta *MetaData `protobuf:"bytes,15,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{0}
}

func (x *Bet) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Bet) GetMarketUid() string {
	if x != nil {
		return x.MarketUid
	}
	return ""
}

func (x *Bet) GetOddsUid() string {
	if x != nil {
		return x.OddsUid
	}
	return ""
}

func (x *Bet) GetOddsValue() string {
	if x != nil {
		return x.OddsValue
	}
	return ""
}

func (x *Bet) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Bet) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *Bet) GetStatus() Bet_Status {
	if x != nil {
		return x.Status
	}
	return Bet_STATUS_UNSPECIFIED
}

func (x *Bet) GetResult() Bet_Result {
	if x != nil {
		return x.Result
	}
	return Bet_RESULT_UNSPECIFIED
}

func (x *Bet) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Bet) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Bet) GetSettlementHeight() int64 {
	if x != nil {
		return x.SettlementHeight
	}
	return 0
}

func (x *Bet) GetMaxLossMultiplier() string {
	if x != nil {
		return x.MaxLossMultiplier
	}
	return ""
}

func (x *Bet) GetBetFulfillment() []*BetFulfillment {
	if x != nil {
		return x.BetFulfillment
	}
	return nil
}

func (x *Bet) GetMeta() *MetaData {
	if x != nil {
		return x.Meta
	}
	return nil
}

// UID2ID is the type for mapping UIDs and Sequential IDs of bets.
type UID2ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the universal unique identifier assigned to the bet.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// id is an autogenerated sequential id for a bet.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UID2ID) Reset() {
	*x = UID2ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UID2ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UID2ID) ProtoMessage() {}

// Deprecated: Use UID2ID.ProtoReflect.Descriptor instead.
func (*UID2ID) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{1}
}

func (x *UID2ID) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UID2ID) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// PendingBet is the type for an unsettled bet
type PendingBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the universal unique identifier for the bet.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// creator is the bettor address.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *PendingBet) Reset() {
	*x = PendingBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingBet) ProtoMessage() {}

// Deprecated: Use PendingBet.ProtoReflect.Descriptor instead.
func (*PendingBet) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{2}
}

func (x *PendingBet) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PendingBet) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

// SettledBet is the type for a settled bet.
type SettledBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the universal unique identifier for the bet.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// bettor_address is the bech32 address of the bettor account.
	BettorAddress string `protobuf:"bytes,2,opt,name=bettor_address,json=bettorAddress,proto3" json:"bettor_address,omitempty"`
}

func (x *SettledBet) Reset() {
	*x = SettledBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettledBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettledBet) ProtoMessage() {}

// Deprecated: Use SettledBet.ProtoReflect.Descriptor instead.
func (*SettledBet) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{3}
}

func (x *SettledBet) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SettledBet) GetBettorAddress() string {
	if x != nil {
		return x.BettorAddress
	}
	return ""
}

// BetFulfillment: A bet can be fulfilled by multiple users participating as a
// house Every participant is exposed to a share of risk or payout associated
// with the bet For the risk exposure on a bet, an estimated bet amount is also
// allocated to the participant This bet amount is the amount participant
// receive if the bettor loose the bet
type BetFulfillment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// participant_address is the bech32-encoded address of the participant
	// fulfilling bet.
	ParticipantAddress string `protobuf:"bytes,1,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	// participation_index is the index in initial participation queue index
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty"`
	// bet amount fulfilled by the participation
	BetAmount string `protobuf:"bytes,3,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	// payout_profit is the fulfilled profit by the participation.
	PayoutProfit string `protobuf:"bytes,4,opt,name=payout_profit,json=payoutProfit,proto3" json:"payout_profit,omitempty"`
}

func (x *BetFulfillment) Reset() {
	*x = BetFulfillment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetFulfillment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetFulfillment) ProtoMessage() {}

// Deprecated: Use BetFulfillment.ProtoReflect.Descriptor instead.
func (*BetFulfillment) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{4}
}

func (x *BetFulfillment) GetParticipantAddress() string {
	if x != nil {
		return x.ParticipantAddress
	}
	return ""
}

func (x *BetFulfillment) GetParticipationIndex() uint64 {
	if x != nil {
		return x.ParticipationIndex
	}
	return 0
}

func (x *BetFulfillment) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *BetFulfillment) GetPayoutProfit() string {
	if x != nil {
		return x.PayoutProfit
	}
	return ""
}

// metadata for bet
type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// selected_odds_type is metadata for bet
	SelectedOddsType OddsType `protobuf:"varint,1,opt,name=selected_odds_type,json=selectedOddsType,proto3,enum=sgenetwork.sge.bet.OddsType" json:"selected_odds_type,omitempty"`
	// selected_odds_value is metadata for bet
	SelectedOddsValue string `protobuf:"bytes,2,opt,name=selected_odds_value,json=selectedOddsValue,proto3" json:"selected_odds_value,omitempty"`
	// is_main_market will tell weather the bet placed on the main market or not
	IsMainMarket bool `protobuf:"varint,3,opt,name=is_main_market,json=isMainMarket,proto3" json:"is_main_market,omitempty"`
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_bet_bet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_bet_bet_proto_rawDescGZIP(), []int{5}
}

func (x *MetaData) GetSelectedOddsType() OddsType {
	if x != nil {
		return x.SelectedOddsType
	}
	return OddsType_ODDS_TYPE_UNSPECIFIED
}

func (x *MetaData) GetSelectedOddsValue() string {
	if x != nil {
		return x.SelectedOddsValue
	}
	return ""
}

func (x *MetaData) GetIsMainMarket() bool {
	if x != nil {
		return x.IsMainMarket
	}
	return false
}

var File_sgenetwork_sge_bet_bet_proto protoreflect.FileDescriptor

var file_sgenetwork_sge_bet_bet_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65,
	0x2f, 0x62, 0x65, 0x74, 0x2f, 0x62, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x62,
	0x65, 0x74, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x73, 0x67, 0x65, 0x2f, 0x62, 0x65, 0x74, 0x2f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x07, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x12,
	0x20, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde,
	0x1f, 0x03, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xe2, 0xde, 0x1f, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0xe2, 0xde, 0x1f, 0x07, 0x4f, 0x64, 0x64, 0x73, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f,
	0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f,
	0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x64, 0x64, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x62, 0x65, 0x74, 0x2e,
	0x42, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x67, 0x65, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x42, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d,
	0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x4c, 0x6f, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x0f, 0x62, 0x65, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x62, 0x65, 0x74, 0x2e, 0x42, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x62, 0x65, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x22, 0x6a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x57, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x06, 0x55, 0x49, 0x44, 0x32, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x03,
	0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0c, 0xe2, 0xde, 0x1f,
	0x02, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a,
	0x0a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x03, 0x55, 0x49,
	0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x6f, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x42, 0x65, 0x74, 0x12,
	0x20, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xde,
	0x1f, 0x03, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52,
	0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x64, 0x64, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65,
	0x2e, 0x62, 0x65, 0x74, 0x2e, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x64, 0x64, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x64, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0xbf, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x67,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x62, 0x65, 0x74,
	0x42, 0x08, 0x42, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x65, 0x2d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x62, 0x65, 0x74, 0xa2,
	0x02, 0x03, 0x53, 0x53, 0x42, 0xaa, 0x02, 0x12, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x53, 0x67, 0x65, 0x2e, 0x42, 0x65, 0x74, 0xca, 0x02, 0x12, 0x53, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x53, 0x67, 0x65, 0x5c, 0x42, 0x65, 0x74, 0xe2,
	0x02, 0x1e, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x53, 0x67, 0x65,
	0x5c, 0x42, 0x65, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x14, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x3a, 0x53,
	0x67, 0x65, 0x3a, 0x3a, 0x42, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sgenetwork_sge_bet_bet_proto_rawDescOnce sync.Once
	file_sgenetwork_sge_bet_bet_proto_rawDescData = file_sgenetwork_sge_bet_bet_proto_rawDesc
)

func file_sgenetwork_sge_bet_bet_proto_rawDescGZIP() []byte {
	file_sgenetwork_sge_bet_bet_proto_rawDescOnce.Do(func() {
		file_sgenetwork_sge_bet_bet_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgenetwork_sge_bet_bet_proto_rawDescData)
	})
	return file_sgenetwork_sge_bet_bet_proto_rawDescData
}

var file_sgenetwork_sge_bet_bet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sgenetwork_sge_bet_bet_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sgenetwork_sge_bet_bet_proto_goTypes = []interface{}{
	(Bet_Status)(0),        // 0: sgenetwork.sge.bet.Bet.Status
	(Bet_Result)(0),        // 1: sgenetwork.sge.bet.Bet.Result
	(*Bet)(nil),            // 2: sgenetwork.sge.bet.Bet
	(*UID2ID)(nil),         // 3: sgenetwork.sge.bet.UID2ID
	(*PendingBet)(nil),     // 4: sgenetwork.sge.bet.PendingBet
	(*SettledBet)(nil),     // 5: sgenetwork.sge.bet.SettledBet
	(*BetFulfillment)(nil), // 6: sgenetwork.sge.bet.BetFulfillment
	(*MetaData)(nil),       // 7: sgenetwork.sge.bet.MetaData
	(OddsType)(0),          // 8: sgenetwork.sge.bet.OddsType
}
var file_sgenetwork_sge_bet_bet_proto_depIdxs = []int32{
	0, // 0: sgenetwork.sge.bet.Bet.status:type_name -> sgenetwork.sge.bet.Bet.Status
	1, // 1: sgenetwork.sge.bet.Bet.result:type_name -> sgenetwork.sge.bet.Bet.Result
	6, // 2: sgenetwork.sge.bet.Bet.bet_fulfillment:type_name -> sgenetwork.sge.bet.BetFulfillment
	7, // 3: sgenetwork.sge.bet.Bet.meta:type_name -> sgenetwork.sge.bet.MetaData
	8, // 4: sgenetwork.sge.bet.MetaData.selected_odds_type:type_name -> sgenetwork.sge.bet.OddsType
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_sgenetwork_sge_bet_bet_proto_init() }
func file_sgenetwork_sge_bet_bet_proto_init() {
	if File_sgenetwork_sge_bet_bet_proto != nil {
		return
	}
	file_sgenetwork_sge_bet_odds_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sgenetwork_sge_bet_bet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_bet_bet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UID2ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_bet_bet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_bet_bet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettledBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_bet_bet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetFulfillment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_bet_bet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgenetwork_sge_bet_bet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sgenetwork_sge_bet_bet_proto_goTypes,
		DependencyIndexes: file_sgenetwork_sge_bet_bet_proto_depIdxs,
		EnumInfos:         file_sgenetwork_sge_bet_bet_proto_enumTypes,
		MessageInfos:      file_sgenetwork_sge_bet_bet_proto_msgTypes,
	}.Build()
	File_sgenetwork_sge_bet_bet_proto = out.File
	file_sgenetwork_sge_bet_bet_proto_rawDesc = nil
	file_sgenetwork_sge_bet_bet_proto_goTypes = nil
	file_sgenetwork_sge_bet_bet_proto_depIdxs = nil
}
