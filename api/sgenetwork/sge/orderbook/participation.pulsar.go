// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package orderbook

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_OrderBookParticipation                                 protoreflect.MessageDescriptor
	fd_OrderBookParticipation_index                           protoreflect.FieldDescriptor
	fd_OrderBookParticipation_order_book_uid                  protoreflect.FieldDescriptor
	fd_OrderBookParticipation_participant_address             protoreflect.FieldDescriptor
	fd_OrderBookParticipation_liquidity                       protoreflect.FieldDescriptor
	fd_OrderBookParticipation_fee                             protoreflect.FieldDescriptor
	fd_OrderBookParticipation_current_round_liquidity         protoreflect.FieldDescriptor
	fd_OrderBookParticipation_exposures_not_filled            protoreflect.FieldDescriptor
	fd_OrderBookParticipation_total_bet_amount                protoreflect.FieldDescriptor
	fd_OrderBookParticipation_current_round_total_bet_amount  protoreflect.FieldDescriptor
	fd_OrderBookParticipation_max_loss                        protoreflect.FieldDescriptor
	fd_OrderBookParticipation_current_round_max_loss          protoreflect.FieldDescriptor
	fd_OrderBookParticipation_current_round_max_loss_odds_uid protoreflect.FieldDescriptor
	fd_OrderBookParticipation_actual_profit                   protoreflect.FieldDescriptor
	fd_OrderBookParticipation_is_settled                      protoreflect.FieldDescriptor
	fd_OrderBookParticipation_returned_amount                 protoreflect.FieldDescriptor
	fd_OrderBookParticipation_reimbursed_fee                  protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_orderbook_participation_proto_init()
	md_OrderBookParticipation = File_sgenetwork_sge_orderbook_participation_proto.Messages().ByName("OrderBookParticipation")
	fd_OrderBookParticipation_index = md_OrderBookParticipation.Fields().ByName("index")
	fd_OrderBookParticipation_order_book_uid = md_OrderBookParticipation.Fields().ByName("order_book_uid")
	fd_OrderBookParticipation_participant_address = md_OrderBookParticipation.Fields().ByName("participant_address")
	fd_OrderBookParticipation_liquidity = md_OrderBookParticipation.Fields().ByName("liquidity")
	fd_OrderBookParticipation_fee = md_OrderBookParticipation.Fields().ByName("fee")
	fd_OrderBookParticipation_current_round_liquidity = md_OrderBookParticipation.Fields().ByName("current_round_liquidity")
	fd_OrderBookParticipation_exposures_not_filled = md_OrderBookParticipation.Fields().ByName("exposures_not_filled")
	fd_OrderBookParticipation_total_bet_amount = md_OrderBookParticipation.Fields().ByName("total_bet_amount")
	fd_OrderBookParticipation_current_round_total_bet_amount = md_OrderBookParticipation.Fields().ByName("current_round_total_bet_amount")
	fd_OrderBookParticipation_max_loss = md_OrderBookParticipation.Fields().ByName("max_loss")
	fd_OrderBookParticipation_current_round_max_loss = md_OrderBookParticipation.Fields().ByName("current_round_max_loss")
	fd_OrderBookParticipation_current_round_max_loss_odds_uid = md_OrderBookParticipation.Fields().ByName("current_round_max_loss_odds_uid")
	fd_OrderBookParticipation_actual_profit = md_OrderBookParticipation.Fields().ByName("actual_profit")
	fd_OrderBookParticipation_is_settled = md_OrderBookParticipation.Fields().ByName("is_settled")
	fd_OrderBookParticipation_returned_amount = md_OrderBookParticipation.Fields().ByName("returned_amount")
	fd_OrderBookParticipation_reimbursed_fee = md_OrderBookParticipation.Fields().ByName("reimbursed_fee")
}

var _ protoreflect.Message = (*fastReflection_OrderBookParticipation)(nil)

type fastReflection_OrderBookParticipation OrderBookParticipation

func (x *OrderBookParticipation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OrderBookParticipation)(x)
}

func (x *OrderBookParticipation) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_orderbook_participation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OrderBookParticipation_messageType fastReflection_OrderBookParticipation_messageType
var _ protoreflect.MessageType = fastReflection_OrderBookParticipation_messageType{}

type fastReflection_OrderBookParticipation_messageType struct{}

func (x fastReflection_OrderBookParticipation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OrderBookParticipation)(nil)
}
func (x fastReflection_OrderBookParticipation_messageType) New() protoreflect.Message {
	return new(fastReflection_OrderBookParticipation)
}
func (x fastReflection_OrderBookParticipation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderBookParticipation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OrderBookParticipation) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderBookParticipation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OrderBookParticipation) Type() protoreflect.MessageType {
	return _fastReflection_OrderBookParticipation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OrderBookParticipation) New() protoreflect.Message {
	return new(fastReflection_OrderBookParticipation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OrderBookParticipation) Interface() protoreflect.ProtoMessage {
	return (*OrderBookParticipation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OrderBookParticipation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_OrderBookParticipation_index, value) {
			return
		}
	}
	if x.OrderBookUid != "" {
		value := protoreflect.ValueOfString(x.OrderBookUid)
		if !f(fd_OrderBookParticipation_order_book_uid, value) {
			return
		}
	}
	if x.ParticipantAddress != "" {
		value := protoreflect.ValueOfString(x.ParticipantAddress)
		if !f(fd_OrderBookParticipation_participant_address, value) {
			return
		}
	}
	if x.Liquidity != "" {
		value := protoreflect.ValueOfString(x.Liquidity)
		if !f(fd_OrderBookParticipation_liquidity, value) {
			return
		}
	}
	if x.Fee != "" {
		value := protoreflect.ValueOfString(x.Fee)
		if !f(fd_OrderBookParticipation_fee, value) {
			return
		}
	}
	if x.CurrentRoundLiquidity != "" {
		value := protoreflect.ValueOfString(x.CurrentRoundLiquidity)
		if !f(fd_OrderBookParticipation_current_round_liquidity, value) {
			return
		}
	}
	if x.ExposuresNotFilled != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExposuresNotFilled)
		if !f(fd_OrderBookParticipation_exposures_not_filled, value) {
			return
		}
	}
	if x.TotalBetAmount != "" {
		value := protoreflect.ValueOfString(x.TotalBetAmount)
		if !f(fd_OrderBookParticipation_total_bet_amount, value) {
			return
		}
	}
	if x.CurrentRoundTotalBetAmount != "" {
		value := protoreflect.ValueOfString(x.CurrentRoundTotalBetAmount)
		if !f(fd_OrderBookParticipation_current_round_total_bet_amount, value) {
			return
		}
	}
	if x.MaxLoss != "" {
		value := protoreflect.ValueOfString(x.MaxLoss)
		if !f(fd_OrderBookParticipation_max_loss, value) {
			return
		}
	}
	if x.CurrentRoundMaxLoss != "" {
		value := protoreflect.ValueOfString(x.CurrentRoundMaxLoss)
		if !f(fd_OrderBookParticipation_current_round_max_loss, value) {
			return
		}
	}
	if x.CurrentRoundMaxLossOddsUid != "" {
		value := protoreflect.ValueOfString(x.CurrentRoundMaxLossOddsUid)
		if !f(fd_OrderBookParticipation_current_round_max_loss_odds_uid, value) {
			return
		}
	}
	if x.ActualProfit != "" {
		value := protoreflect.ValueOfString(x.ActualProfit)
		if !f(fd_OrderBookParticipation_actual_profit, value) {
			return
		}
	}
	if x.IsSettled != false {
		value := protoreflect.ValueOfBool(x.IsSettled)
		if !f(fd_OrderBookParticipation_is_settled, value) {
			return
		}
	}
	if x.ReturnedAmount != "" {
		value := protoreflect.ValueOfString(x.ReturnedAmount)
		if !f(fd_OrderBookParticipation_returned_amount, value) {
			return
		}
	}
	if x.ReimbursedFee != "" {
		value := protoreflect.ValueOfString(x.ReimbursedFee)
		if !f(fd_OrderBookParticipation_reimbursed_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OrderBookParticipation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookParticipation.index":
		return x.Index != uint64(0)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.order_book_uid":
		return x.OrderBookUid != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.participant_address":
		return x.ParticipantAddress != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.liquidity":
		return x.Liquidity != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.fee":
		return x.Fee != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_liquidity":
		return x.CurrentRoundLiquidity != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.exposures_not_filled":
		return x.ExposuresNotFilled != uint64(0)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.total_bet_amount":
		return x.TotalBetAmount != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_total_bet_amount":
		return x.CurrentRoundTotalBetAmount != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.max_loss":
		return x.MaxLoss != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss":
		return x.CurrentRoundMaxLoss != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss_odds_uid":
		return x.CurrentRoundMaxLossOddsUid != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.actual_profit":
		return x.ActualProfit != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.is_settled":
		return x.IsSettled != false
	case "sgenetwork.sge.orderbook.OrderBookParticipation.returned_amount":
		return x.ReturnedAmount != ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.reimbursed_fee":
		return x.ReimbursedFee != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookParticipation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookParticipation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookParticipation.index":
		x.Index = uint64(0)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.order_book_uid":
		x.OrderBookUid = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.participant_address":
		x.ParticipantAddress = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.liquidity":
		x.Liquidity = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.fee":
		x.Fee = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_liquidity":
		x.CurrentRoundLiquidity = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.exposures_not_filled":
		x.ExposuresNotFilled = uint64(0)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.total_bet_amount":
		x.TotalBetAmount = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_total_bet_amount":
		x.CurrentRoundTotalBetAmount = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.max_loss":
		x.MaxLoss = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss":
		x.CurrentRoundMaxLoss = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss_odds_uid":
		x.CurrentRoundMaxLossOddsUid = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.actual_profit":
		x.ActualProfit = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.is_settled":
		x.IsSettled = false
	case "sgenetwork.sge.orderbook.OrderBookParticipation.returned_amount":
		x.ReturnedAmount = ""
	case "sgenetwork.sge.orderbook.OrderBookParticipation.reimbursed_fee":
		x.ReimbursedFee = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookParticipation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OrderBookParticipation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookParticipation.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.order_book_uid":
		value := x.OrderBookUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.participant_address":
		value := x.ParticipantAddress
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.liquidity":
		value := x.Liquidity
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.fee":
		value := x.Fee
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_liquidity":
		value := x.CurrentRoundLiquidity
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.exposures_not_filled":
		value := x.ExposuresNotFilled
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.total_bet_amount":
		value := x.TotalBetAmount
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_total_bet_amount":
		value := x.CurrentRoundTotalBetAmount
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.max_loss":
		value := x.MaxLoss
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss":
		value := x.CurrentRoundMaxLoss
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss_odds_uid":
		value := x.CurrentRoundMaxLossOddsUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.actual_profit":
		value := x.ActualProfit
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.is_settled":
		value := x.IsSettled
		return protoreflect.ValueOfBool(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.returned_amount":
		value := x.ReturnedAmount
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.reimbursed_fee":
		value := x.ReimbursedFee
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookParticipation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookParticipation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookParticipation.index":
		x.Index = value.Uint()
	case "sgenetwork.sge.orderbook.OrderBookParticipation.order_book_uid":
		x.OrderBookUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.participant_address":
		x.ParticipantAddress = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.liquidity":
		x.Liquidity = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.fee":
		x.Fee = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_liquidity":
		x.CurrentRoundLiquidity = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.exposures_not_filled":
		x.ExposuresNotFilled = value.Uint()
	case "sgenetwork.sge.orderbook.OrderBookParticipation.total_bet_amount":
		x.TotalBetAmount = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_total_bet_amount":
		x.CurrentRoundTotalBetAmount = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.max_loss":
		x.MaxLoss = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss":
		x.CurrentRoundMaxLoss = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss_odds_uid":
		x.CurrentRoundMaxLossOddsUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.actual_profit":
		x.ActualProfit = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.is_settled":
		x.IsSettled = value.Bool()
	case "sgenetwork.sge.orderbook.OrderBookParticipation.returned_amount":
		x.ReturnedAmount = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.reimbursed_fee":
		x.ReimbursedFee = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookParticipation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookParticipation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookParticipation.index":
		panic(fmt.Errorf("field index of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.order_book_uid":
		panic(fmt.Errorf("field order_book_uid of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.participant_address":
		panic(fmt.Errorf("field participant_address of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.liquidity":
		panic(fmt.Errorf("field liquidity of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.fee":
		panic(fmt.Errorf("field fee of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_liquidity":
		panic(fmt.Errorf("field current_round_liquidity of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.exposures_not_filled":
		panic(fmt.Errorf("field exposures_not_filled of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.total_bet_amount":
		panic(fmt.Errorf("field total_bet_amount of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_total_bet_amount":
		panic(fmt.Errorf("field current_round_total_bet_amount of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.max_loss":
		panic(fmt.Errorf("field max_loss of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss":
		panic(fmt.Errorf("field current_round_max_loss of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss_odds_uid":
		panic(fmt.Errorf("field current_round_max_loss_odds_uid of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.actual_profit":
		panic(fmt.Errorf("field actual_profit of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.is_settled":
		panic(fmt.Errorf("field is_settled of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.returned_amount":
		panic(fmt.Errorf("field returned_amount of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.reimbursed_fee":
		panic(fmt.Errorf("field reimbursed_fee of message sgenetwork.sge.orderbook.OrderBookParticipation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookParticipation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OrderBookParticipation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookParticipation.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.order_book_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.participant_address":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.liquidity":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.fee":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_liquidity":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.exposures_not_filled":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.orderbook.OrderBookParticipation.total_bet_amount":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_total_bet_amount":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.max_loss":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.current_round_max_loss_odds_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.actual_profit":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.is_settled":
		return protoreflect.ValueOfBool(false)
	case "sgenetwork.sge.orderbook.OrderBookParticipation.returned_amount":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookParticipation.reimbursed_fee":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookParticipation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OrderBookParticipation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.orderbook.OrderBookParticipation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OrderBookParticipation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookParticipation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OrderBookParticipation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OrderBookParticipation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OrderBookParticipation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.OrderBookUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ParticipantAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Liquidity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Fee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurrentRoundLiquidity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ExposuresNotFilled != 0 {
			n += 1 + runtime.Sov(uint64(x.ExposuresNotFilled))
		}
		l = len(x.TotalBetAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurrentRoundTotalBetAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxLoss)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurrentRoundMaxLoss)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurrentRoundMaxLossOddsUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ActualProfit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsSettled {
			n += 2
		}
		l = len(x.ReturnedAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReimbursedFee)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OrderBookParticipation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ReimbursedFee) > 0 {
			i -= len(x.ReimbursedFee)
			copy(dAtA[i:], x.ReimbursedFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReimbursedFee)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.ReturnedAmount) > 0 {
			i -= len(x.ReturnedAmount)
			copy(dAtA[i:], x.ReturnedAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReturnedAmount)))
			i--
			dAtA[i] = 0x7a
		}
		if x.IsSettled {
			i--
			if x.IsSettled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x70
		}
		if len(x.ActualProfit) > 0 {
			i -= len(x.ActualProfit)
			copy(dAtA[i:], x.ActualProfit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ActualProfit)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.CurrentRoundMaxLossOddsUid) > 0 {
			i -= len(x.CurrentRoundMaxLossOddsUid)
			copy(dAtA[i:], x.CurrentRoundMaxLossOddsUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentRoundMaxLossOddsUid)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.CurrentRoundMaxLoss) > 0 {
			i -= len(x.CurrentRoundMaxLoss)
			copy(dAtA[i:], x.CurrentRoundMaxLoss)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentRoundMaxLoss)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.MaxLoss) > 0 {
			i -= len(x.MaxLoss)
			copy(dAtA[i:], x.MaxLoss)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxLoss)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.CurrentRoundTotalBetAmount) > 0 {
			i -= len(x.CurrentRoundTotalBetAmount)
			copy(dAtA[i:], x.CurrentRoundTotalBetAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentRoundTotalBetAmount)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.TotalBetAmount) > 0 {
			i -= len(x.TotalBetAmount)
			copy(dAtA[i:], x.TotalBetAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalBetAmount)))
			i--
			dAtA[i] = 0x42
		}
		if x.ExposuresNotFilled != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExposuresNotFilled))
			i--
			dAtA[i] = 0x38
		}
		if len(x.CurrentRoundLiquidity) > 0 {
			i -= len(x.CurrentRoundLiquidity)
			copy(dAtA[i:], x.CurrentRoundLiquidity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentRoundLiquidity)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Fee) > 0 {
			i -= len(x.Fee)
			copy(dAtA[i:], x.Fee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Fee)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Liquidity) > 0 {
			i -= len(x.Liquidity)
			copy(dAtA[i:], x.Liquidity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Liquidity)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ParticipantAddress) > 0 {
			i -= len(x.ParticipantAddress)
			copy(dAtA[i:], x.ParticipantAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParticipantAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OrderBookUid) > 0 {
			i -= len(x.OrderBookUid)
			copy(dAtA[i:], x.OrderBookUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderBookUid)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OrderBookParticipation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderBookParticipation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderBookParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderBookUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderBookUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParticipantAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Liquidity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Fee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundLiquidity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentRoundLiquidity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExposuresNotFilled", wireType)
				}
				x.ExposuresNotFilled = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExposuresNotFilled |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalBetAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalBetAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundTotalBetAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentRoundTotalBetAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxLoss", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxLoss = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLoss", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentRoundMaxLoss = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLossOddsUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentRoundMaxLossOddsUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActualProfit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ActualProfit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsSettled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsSettled = bool(v != 0)
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReturnedAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReturnedAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReimbursedFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReimbursedFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ParticipationBetPair                     protoreflect.MessageDescriptor
	fd_ParticipationBetPair_order_book_uid      protoreflect.FieldDescriptor
	fd_ParticipationBetPair_participation_index protoreflect.FieldDescriptor
	fd_ParticipationBetPair_bet_uid             protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_orderbook_participation_proto_init()
	md_ParticipationBetPair = File_sgenetwork_sge_orderbook_participation_proto.Messages().ByName("ParticipationBetPair")
	fd_ParticipationBetPair_order_book_uid = md_ParticipationBetPair.Fields().ByName("order_book_uid")
	fd_ParticipationBetPair_participation_index = md_ParticipationBetPair.Fields().ByName("participation_index")
	fd_ParticipationBetPair_bet_uid = md_ParticipationBetPair.Fields().ByName("bet_uid")
}

var _ protoreflect.Message = (*fastReflection_ParticipationBetPair)(nil)

type fastReflection_ParticipationBetPair ParticipationBetPair

func (x *ParticipationBetPair) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ParticipationBetPair)(x)
}

func (x *ParticipationBetPair) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_orderbook_participation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ParticipationBetPair_messageType fastReflection_ParticipationBetPair_messageType
var _ protoreflect.MessageType = fastReflection_ParticipationBetPair_messageType{}

type fastReflection_ParticipationBetPair_messageType struct{}

func (x fastReflection_ParticipationBetPair_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ParticipationBetPair)(nil)
}
func (x fastReflection_ParticipationBetPair_messageType) New() protoreflect.Message {
	return new(fastReflection_ParticipationBetPair)
}
func (x fastReflection_ParticipationBetPair_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ParticipationBetPair
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ParticipationBetPair) Descriptor() protoreflect.MessageDescriptor {
	return md_ParticipationBetPair
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ParticipationBetPair) Type() protoreflect.MessageType {
	return _fastReflection_ParticipationBetPair_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ParticipationBetPair) New() protoreflect.Message {
	return new(fastReflection_ParticipationBetPair)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ParticipationBetPair) Interface() protoreflect.ProtoMessage {
	return (*ParticipationBetPair)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ParticipationBetPair) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OrderBookUid != "" {
		value := protoreflect.ValueOfString(x.OrderBookUid)
		if !f(fd_ParticipationBetPair_order_book_uid, value) {
			return
		}
	}
	if x.ParticipationIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParticipationIndex)
		if !f(fd_ParticipationBetPair_participation_index, value) {
			return
		}
	}
	if x.BetUid != "" {
		value := protoreflect.ValueOfString(x.BetUid)
		if !f(fd_ParticipationBetPair_bet_uid, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ParticipationBetPair) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationBetPair.order_book_uid":
		return x.OrderBookUid != ""
	case "sgenetwork.sge.orderbook.ParticipationBetPair.participation_index":
		return x.ParticipationIndex != uint64(0)
	case "sgenetwork.sge.orderbook.ParticipationBetPair.bet_uid":
		return x.BetUid != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationBetPair"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationBetPair does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationBetPair) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationBetPair.order_book_uid":
		x.OrderBookUid = ""
	case "sgenetwork.sge.orderbook.ParticipationBetPair.participation_index":
		x.ParticipationIndex = uint64(0)
	case "sgenetwork.sge.orderbook.ParticipationBetPair.bet_uid":
		x.BetUid = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationBetPair"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationBetPair does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ParticipationBetPair) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationBetPair.order_book_uid":
		value := x.OrderBookUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.ParticipationBetPair.participation_index":
		value := x.ParticipationIndex
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.orderbook.ParticipationBetPair.bet_uid":
		value := x.BetUid
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationBetPair"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationBetPair does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationBetPair) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationBetPair.order_book_uid":
		x.OrderBookUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.ParticipationBetPair.participation_index":
		x.ParticipationIndex = value.Uint()
	case "sgenetwork.sge.orderbook.ParticipationBetPair.bet_uid":
		x.BetUid = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationBetPair"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationBetPair does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationBetPair) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationBetPair.order_book_uid":
		panic(fmt.Errorf("field order_book_uid of message sgenetwork.sge.orderbook.ParticipationBetPair is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationBetPair.participation_index":
		panic(fmt.Errorf("field participation_index of message sgenetwork.sge.orderbook.ParticipationBetPair is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationBetPair.bet_uid":
		panic(fmt.Errorf("field bet_uid of message sgenetwork.sge.orderbook.ParticipationBetPair is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationBetPair"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationBetPair does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ParticipationBetPair) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationBetPair.order_book_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.ParticipationBetPair.participation_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.orderbook.ParticipationBetPair.bet_uid":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationBetPair"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationBetPair does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ParticipationBetPair) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.orderbook.ParticipationBetPair", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ParticipationBetPair) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationBetPair) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ParticipationBetPair) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ParticipationBetPair) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ParticipationBetPair)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OrderBookUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParticipationIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.ParticipationIndex))
		}
		l = len(x.BetUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ParticipationBetPair)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BetUid) > 0 {
			i -= len(x.BetUid)
			copy(dAtA[i:], x.BetUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BetUid)))
			i--
			dAtA[i] = 0x1a
		}
		if x.ParticipationIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParticipationIndex))
			i--
			dAtA[i] = 0x10
		}
		if len(x.OrderBookUid) > 0 {
			i -= len(x.OrderBookUid)
			copy(dAtA[i:], x.OrderBookUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderBookUid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ParticipationBetPair)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParticipationBetPair: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParticipationBetPair: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderBookUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderBookUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
				}
				x.ParticipationIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParticipationIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BetUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BetUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SettledOrderbookParticipation                     protoreflect.MessageDescriptor
	fd_SettledOrderbookParticipation_index               protoreflect.FieldDescriptor
	fd_SettledOrderbookParticipation_order_book_uid      protoreflect.FieldDescriptor
	fd_SettledOrderbookParticipation_participant_address protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_orderbook_participation_proto_init()
	md_SettledOrderbookParticipation = File_sgenetwork_sge_orderbook_participation_proto.Messages().ByName("SettledOrderbookParticipation")
	fd_SettledOrderbookParticipation_index = md_SettledOrderbookParticipation.Fields().ByName("index")
	fd_SettledOrderbookParticipation_order_book_uid = md_SettledOrderbookParticipation.Fields().ByName("order_book_uid")
	fd_SettledOrderbookParticipation_participant_address = md_SettledOrderbookParticipation.Fields().ByName("participant_address")
}

var _ protoreflect.Message = (*fastReflection_SettledOrderbookParticipation)(nil)

type fastReflection_SettledOrderbookParticipation SettledOrderbookParticipation

func (x *SettledOrderbookParticipation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SettledOrderbookParticipation)(x)
}

func (x *SettledOrderbookParticipation) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_orderbook_participation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SettledOrderbookParticipation_messageType fastReflection_SettledOrderbookParticipation_messageType
var _ protoreflect.MessageType = fastReflection_SettledOrderbookParticipation_messageType{}

type fastReflection_SettledOrderbookParticipation_messageType struct{}

func (x fastReflection_SettledOrderbookParticipation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SettledOrderbookParticipation)(nil)
}
func (x fastReflection_SettledOrderbookParticipation_messageType) New() protoreflect.Message {
	return new(fastReflection_SettledOrderbookParticipation)
}
func (x fastReflection_SettledOrderbookParticipation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SettledOrderbookParticipation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SettledOrderbookParticipation) Descriptor() protoreflect.MessageDescriptor {
	return md_SettledOrderbookParticipation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SettledOrderbookParticipation) Type() protoreflect.MessageType {
	return _fastReflection_SettledOrderbookParticipation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SettledOrderbookParticipation) New() protoreflect.Message {
	return new(fastReflection_SettledOrderbookParticipation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SettledOrderbookParticipation) Interface() protoreflect.ProtoMessage {
	return (*SettledOrderbookParticipation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SettledOrderbookParticipation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Index)
		if !f(fd_SettledOrderbookParticipation_index, value) {
			return
		}
	}
	if x.OrderBookUid != "" {
		value := protoreflect.ValueOfString(x.OrderBookUid)
		if !f(fd_SettledOrderbookParticipation_order_book_uid, value) {
			return
		}
	}
	if x.ParticipantAddress != "" {
		value := protoreflect.ValueOfString(x.ParticipantAddress)
		if !f(fd_SettledOrderbookParticipation_participant_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SettledOrderbookParticipation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.index":
		return x.Index != uint64(0)
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.order_book_uid":
		return x.OrderBookUid != ""
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.participant_address":
		return x.ParticipantAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.SettledOrderbookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.SettledOrderbookParticipation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledOrderbookParticipation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.index":
		x.Index = uint64(0)
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.order_book_uid":
		x.OrderBookUid = ""
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.participant_address":
		x.ParticipantAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.SettledOrderbookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.SettledOrderbookParticipation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SettledOrderbookParticipation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.index":
		value := x.Index
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.order_book_uid":
		value := x.OrderBookUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.participant_address":
		value := x.ParticipantAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.SettledOrderbookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.SettledOrderbookParticipation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledOrderbookParticipation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.index":
		x.Index = value.Uint()
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.order_book_uid":
		x.OrderBookUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.participant_address":
		x.ParticipantAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.SettledOrderbookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.SettledOrderbookParticipation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledOrderbookParticipation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.index":
		panic(fmt.Errorf("field index of message sgenetwork.sge.orderbook.SettledOrderbookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.order_book_uid":
		panic(fmt.Errorf("field order_book_uid of message sgenetwork.sge.orderbook.SettledOrderbookParticipation is not mutable"))
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.participant_address":
		panic(fmt.Errorf("field participant_address of message sgenetwork.sge.orderbook.SettledOrderbookParticipation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.SettledOrderbookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.SettledOrderbookParticipation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SettledOrderbookParticipation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.order_book_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.SettledOrderbookParticipation.participant_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.SettledOrderbookParticipation"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.SettledOrderbookParticipation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SettledOrderbookParticipation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.orderbook.SettledOrderbookParticipation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SettledOrderbookParticipation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SettledOrderbookParticipation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SettledOrderbookParticipation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SettledOrderbookParticipation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SettledOrderbookParticipation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Index != 0 {
			n += 1 + runtime.Sov(uint64(x.Index))
		}
		l = len(x.OrderBookUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ParticipantAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SettledOrderbookParticipation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ParticipantAddress) > 0 {
			i -= len(x.ParticipantAddress)
			copy(dAtA[i:], x.ParticipantAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParticipantAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OrderBookUid) > 0 {
			i -= len(x.OrderBookUid)
			copy(dAtA[i:], x.OrderBookUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderBookUid)))
			i--
			dAtA[i] = 0x12
		}
		if x.Index != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Index))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SettledOrderbookParticipation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SettledOrderbookParticipation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SettledOrderbookParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				x.Index = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Index |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderBookUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderBookUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParticipantAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sgenetwork/sge/orderbook/participation.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderBookParticipation represents the participants of an order book.
type OrderBookParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index is the index of the participation in the participation queue.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// order_book_uid is the unique identifier corresponding to the order book.
	OrderBookUid string `protobuf:"bytes,2,opt,name=order_book_uid,proto3" json:"order_book_uid,omitempty"`
	// participant_address is the bech32-encoded address of the participant.
	ParticipantAddress string `protobuf:"bytes,3,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
	// liquidity is the total initial liquidity provided.
	Liquidity string `protobuf:"bytes,4,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	// fee is the amount of fee to be paid if participation happens.
	Fee string `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
	// current_round_liquidity is the liquidity provided for the current round.
	CurrentRoundLiquidity string `protobuf:"bytes,6,opt,name=current_round_liquidity,json=currentRoundLiquidity,proto3" json:"current_round_liquidity,omitempty"`
	// exposures_not_filled represents if all of the exposures of the
	// participation are filled or not.
	ExposuresNotFilled uint64 `protobuf:"varint,7,opt,name=exposures_not_filled,json=exposuresNotFilled,proto3" json:"exposures_not_filled,omitempty"`
	// total_bet_amount is the total bet amount corresponding to all exposures.
	TotalBetAmount string `protobuf:"bytes,8,opt,name=total_bet_amount,json=totalBetAmount,proto3" json:"total_bet_amount,omitempty"`
	// current_round_total_bet_amount is the total bet amount corresponding to all
	// exposures in the current round.
	CurrentRoundTotalBetAmount string `protobuf:"bytes,9,opt,name=current_round_total_bet_amount,json=currentRoundTotalBetAmount,proto3" json:"current_round_total_bet_amount,omitempty"`
	// max_loss is the total bet amount corresponding to all exposure.
	MaxLoss string `protobuf:"bytes,10,opt,name=max_loss,json=maxLoss,proto3" json:"max_loss,omitempty"`
	// current_round_max_loss is the current round max loss.
	CurrentRoundMaxLoss string `protobuf:"bytes,11,opt,name=current_round_max_loss,json=currentRoundMaxLoss,proto3" json:"current_round_max_loss,omitempty"`
	// current_round_max_loss_odds_uid is the total max loss corresponding to
	// all exposures.
	CurrentRoundMaxLossOddsUid string `protobuf:"bytes,12,opt,name=current_round_max_loss_odds_uid,proto3" json:"current_round_max_loss_odds_uid,omitempty"`
	// actual_profit is the actual profit of the participation fulfillment.
	ActualProfit string `protobuf:"bytes,13,opt,name=actual_profit,json=actualProfit,proto3" json:"actual_profit,omitempty"`
	// is_settled represents if the participation is settled or not.
	IsSettled bool `protobuf:"varint,14,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`
	// returned_amount is the total returned amount to the user's account
	// including reimbursed fees.
	ReturnedAmount string `protobuf:"bytes,15,opt,name=returned_amount,json=returnedAmount,proto3" json:"returned_amount,omitempty"`
	// reimbursed_fee is the fee reimbursed because of reasons such as market
	// calcellation.
	ReimbursedFee string `protobuf:"bytes,16,opt,name=reimbursed_fee,json=reimbursedFee,proto3" json:"reimbursed_fee,omitempty"`
}

func (x *OrderBookParticipation) Reset() {
	*x = OrderBookParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_orderbook_participation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookParticipation) ProtoMessage() {}

// Deprecated: Use OrderBookParticipation.ProtoReflect.Descriptor instead.
func (*OrderBookParticipation) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_orderbook_participation_proto_rawDescGZIP(), []int{0}
}

func (x *OrderBookParticipation) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OrderBookParticipation) GetOrderBookUid() string {
	if x != nil {
		return x.OrderBookUid
	}
	return ""
}

func (x *OrderBookParticipation) GetParticipantAddress() string {
	if x != nil {
		return x.ParticipantAddress
	}
	return ""
}

func (x *OrderBookParticipation) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *OrderBookParticipation) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *OrderBookParticipation) GetCurrentRoundLiquidity() string {
	if x != nil {
		return x.CurrentRoundLiquidity
	}
	return ""
}

func (x *OrderBookParticipation) GetExposuresNotFilled() uint64 {
	if x != nil {
		return x.ExposuresNotFilled
	}
	return 0
}

func (x *OrderBookParticipation) GetTotalBetAmount() string {
	if x != nil {
		return x.TotalBetAmount
	}
	return ""
}

func (x *OrderBookParticipation) GetCurrentRoundTotalBetAmount() string {
	if x != nil {
		return x.CurrentRoundTotalBetAmount
	}
	return ""
}

func (x *OrderBookParticipation) GetMaxLoss() string {
	if x != nil {
		return x.MaxLoss
	}
	return ""
}

func (x *OrderBookParticipation) GetCurrentRoundMaxLoss() string {
	if x != nil {
		return x.CurrentRoundMaxLoss
	}
	return ""
}

func (x *OrderBookParticipation) GetCurrentRoundMaxLossOddsUid() string {
	if x != nil {
		return x.CurrentRoundMaxLossOddsUid
	}
	return ""
}

func (x *OrderBookParticipation) GetActualProfit() string {
	if x != nil {
		return x.ActualProfit
	}
	return ""
}

func (x *OrderBookParticipation) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *OrderBookParticipation) GetReturnedAmount() string {
	if x != nil {
		return x.ReturnedAmount
	}
	return ""
}

func (x *OrderBookParticipation) GetReimbursedFee() string {
	if x != nil {
		return x.ReimbursedFee
	}
	return ""
}

// ParticipationBetPair represents the book participation and bet bond.
type ParticipationBetPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order_book_uid is the unique identifier corresponding to the order book
	OrderBookUid string `protobuf:"bytes,1,opt,name=order_book_uid,proto3" json:"order_book_uid,omitempty"`
	// participation_index is the index of participation corresponding to the bet
	// fulfillment.
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty"`
	// bet_uid is the bet universal unique identifier of the bet that is
	// fulfilled.
	BetUid string `protobuf:"bytes,3,opt,name=bet_uid,proto3" json:"bet_uid,omitempty"`
}

func (x *ParticipationBetPair) Reset() {
	*x = ParticipationBetPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_orderbook_participation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipationBetPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipationBetPair) ProtoMessage() {}

// Deprecated: Use ParticipationBetPair.ProtoReflect.Descriptor instead.
func (*ParticipationBetPair) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_orderbook_participation_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipationBetPair) GetOrderBookUid() string {
	if x != nil {
		return x.OrderBookUid
	}
	return ""
}

func (x *ParticipationBetPair) GetParticipationIndex() uint64 {
	if x != nil {
		return x.ParticipationIndex
	}
	return 0
}

func (x *ParticipationBetPair) GetBetUid() string {
	if x != nil {
		return x.BetUid
	}
	return ""
}

// SettledOrderbookParticipation is the type for a settled orderbook
// participation.
type SettledOrderbookParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index is the index of the participation in the participation queue.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// order_book_uid is the unique identifier corresponding to the order book.
	OrderBookUid string `protobuf:"bytes,2,opt,name=order_book_uid,proto3" json:"order_book_uid,omitempty"`
	// participant_address is the bech32-encoded address of the participant.
	ParticipantAddress string `protobuf:"bytes,3,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty"`
}

func (x *SettledOrderbookParticipation) Reset() {
	*x = SettledOrderbookParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_orderbook_participation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettledOrderbookParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettledOrderbookParticipation) ProtoMessage() {}

// Deprecated: Use SettledOrderbookParticipation.ProtoReflect.Descriptor instead.
func (*SettledOrderbookParticipation) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_orderbook_participation_proto_rawDescGZIP(), []int{2}
}

func (x *SettledOrderbookParticipation) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SettledOrderbookParticipation) GetOrderBookUid() string {
	if x != nil {
		return x.OrderBookUid
	}
	return ""
}

func (x *SettledOrderbookParticipation) GetParticipantAddress() string {
	if x != nil {
		return x.ParticipantAddress
	}
	return ""
}

var File_sgenetwork_sge_orderbook_participation_proto protoreflect.FileDescriptor

var file_sgenetwork_sge_orderbook_participation_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18,
	0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x0c, 0x0a, 0x16, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x10, 0xf2, 0xde, 0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xde, 0x1f, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x4f, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x22, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde,
	0x1f, 0x0a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66, 0x65, 0x65, 0x22, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x77, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xf2, 0xde, 0x1f, 0x1e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x22, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xf2, 0xde, 0x1f, 0x1b, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x25, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2,
	0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x22, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x73, 0x0a, 0x16, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x1d, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x22, 0x52, 0x13, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0xb5, 0x01, 0x0a, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x64, 0x64, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0xe2, 0xde, 0x1f, 0x1a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x4c,
	0x6f, 0x73, 0x73, 0x4f, 0x64, 0x64, 0x73, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x1f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0xf2, 0xde, 0x1f,
	0x26, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x64,
	0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x22, 0x52, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde,
	0x1f, 0x14, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x22, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0e, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0e,
	0x72, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x69,
	0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x22, 0x52, 0x0d, 0x72, 0x65,
	0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x64, 0x46, 0x65, 0x65, 0x3a, 0x0c, 0x88, 0xa0, 0x1f,
	0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xde, 0x1f, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x12, 0x4f,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0xf2, 0xde, 0x1f,
	0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2f, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xe2, 0xde, 0x1f, 0x06, 0x42, 0x65, 0x74, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x07,
	0x62, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x07, 0x62, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x22, 0xfc, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x10, 0xf2, 0xde, 0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x22, 0xe2, 0xde, 0x1f, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0xed, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x42, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x65, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73,
	0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0xa2,
	0x02, 0x03, 0x53, 0x53, 0x4f, 0xaa, 0x02, 0x18, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x53, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0xca, 0x02, 0x18, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x53, 0x67,
	0x65, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0xe2, 0x02, 0x24, 0x53, 0x67,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x53, 0x67, 0x65, 0x5c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x1a, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a,
	0x3a, 0x53, 0x67, 0x65, 0x3a, 0x3a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sgenetwork_sge_orderbook_participation_proto_rawDescOnce sync.Once
	file_sgenetwork_sge_orderbook_participation_proto_rawDescData = file_sgenetwork_sge_orderbook_participation_proto_rawDesc
)

func file_sgenetwork_sge_orderbook_participation_proto_rawDescGZIP() []byte {
	file_sgenetwork_sge_orderbook_participation_proto_rawDescOnce.Do(func() {
		file_sgenetwork_sge_orderbook_participation_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgenetwork_sge_orderbook_participation_proto_rawDescData)
	})
	return file_sgenetwork_sge_orderbook_participation_proto_rawDescData
}

var file_sgenetwork_sge_orderbook_participation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sgenetwork_sge_orderbook_participation_proto_goTypes = []interface{}{
	(*OrderBookParticipation)(nil),        // 0: sgenetwork.sge.orderbook.OrderBookParticipation
	(*ParticipationBetPair)(nil),          // 1: sgenetwork.sge.orderbook.ParticipationBetPair
	(*SettledOrderbookParticipation)(nil), // 2: sgenetwork.sge.orderbook.SettledOrderbookParticipation
}
var file_sgenetwork_sge_orderbook_participation_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sgenetwork_sge_orderbook_participation_proto_init() }
func file_sgenetwork_sge_orderbook_participation_proto_init() {
	if File_sgenetwork_sge_orderbook_participation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sgenetwork_sge_orderbook_participation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_orderbook_participation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipationBetPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_orderbook_participation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettledOrderbookParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgenetwork_sge_orderbook_participation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sgenetwork_sge_orderbook_participation_proto_goTypes,
		DependencyIndexes: file_sgenetwork_sge_orderbook_participation_proto_depIdxs,
		MessageInfos:      file_sgenetwork_sge_orderbook_participation_proto_msgTypes,
	}.Build()
	File_sgenetwork_sge_orderbook_participation_proto = out.File
	file_sgenetwork_sge_orderbook_participation_proto_rawDesc = nil
	file_sgenetwork_sge_orderbook_participation_proto_goTypes = nil
	file_sgenetwork_sge_orderbook_participation_proto_depIdxs = nil
}
