// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package orderbook

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_OrderBookOddsExposure_3_list)(nil)

type _OrderBookOddsExposure_3_list struct {
	list *[]uint64
}

func (x *_OrderBookOddsExposure_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OrderBookOddsExposure_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_OrderBookOddsExposure_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_OrderBookOddsExposure_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_OrderBookOddsExposure_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message OrderBookOddsExposure at list field FulfillmentQueue as it is not of Message kind"))
}

func (x *_OrderBookOddsExposure_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_OrderBookOddsExposure_3_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_OrderBookOddsExposure_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OrderBookOddsExposure                   protoreflect.MessageDescriptor
	fd_OrderBookOddsExposure_order_book_uid    protoreflect.FieldDescriptor
	fd_OrderBookOddsExposure_odds_uid          protoreflect.FieldDescriptor
	fd_OrderBookOddsExposure_fulfillment_queue protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_orderbook_exposure_proto_init()
	md_OrderBookOddsExposure = File_sgenetwork_sge_orderbook_exposure_proto.Messages().ByName("OrderBookOddsExposure")
	fd_OrderBookOddsExposure_order_book_uid = md_OrderBookOddsExposure.Fields().ByName("order_book_uid")
	fd_OrderBookOddsExposure_odds_uid = md_OrderBookOddsExposure.Fields().ByName("odds_uid")
	fd_OrderBookOddsExposure_fulfillment_queue = md_OrderBookOddsExposure.Fields().ByName("fulfillment_queue")
}

var _ protoreflect.Message = (*fastReflection_OrderBookOddsExposure)(nil)

type fastReflection_OrderBookOddsExposure OrderBookOddsExposure

func (x *OrderBookOddsExposure) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OrderBookOddsExposure)(x)
}

func (x *OrderBookOddsExposure) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_orderbook_exposure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OrderBookOddsExposure_messageType fastReflection_OrderBookOddsExposure_messageType
var _ protoreflect.MessageType = fastReflection_OrderBookOddsExposure_messageType{}

type fastReflection_OrderBookOddsExposure_messageType struct{}

func (x fastReflection_OrderBookOddsExposure_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OrderBookOddsExposure)(nil)
}
func (x fastReflection_OrderBookOddsExposure_messageType) New() protoreflect.Message {
	return new(fastReflection_OrderBookOddsExposure)
}
func (x fastReflection_OrderBookOddsExposure_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderBookOddsExposure
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OrderBookOddsExposure) Descriptor() protoreflect.MessageDescriptor {
	return md_OrderBookOddsExposure
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OrderBookOddsExposure) Type() protoreflect.MessageType {
	return _fastReflection_OrderBookOddsExposure_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OrderBookOddsExposure) New() protoreflect.Message {
	return new(fastReflection_OrderBookOddsExposure)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OrderBookOddsExposure) Interface() protoreflect.ProtoMessage {
	return (*OrderBookOddsExposure)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OrderBookOddsExposure) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OrderBookUid != "" {
		value := protoreflect.ValueOfString(x.OrderBookUid)
		if !f(fd_OrderBookOddsExposure_order_book_uid, value) {
			return
		}
	}
	if x.OddsUid != "" {
		value := protoreflect.ValueOfString(x.OddsUid)
		if !f(fd_OrderBookOddsExposure_odds_uid, value) {
			return
		}
	}
	if len(x.FulfillmentQueue) != 0 {
		value := protoreflect.ValueOfList(&_OrderBookOddsExposure_3_list{list: &x.FulfillmentQueue})
		if !f(fd_OrderBookOddsExposure_fulfillment_queue, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OrderBookOddsExposure) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.order_book_uid":
		return x.OrderBookUid != ""
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.odds_uid":
		return x.OddsUid != ""
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.fulfillment_queue":
		return len(x.FulfillmentQueue) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookOddsExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookOddsExposure does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookOddsExposure) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.order_book_uid":
		x.OrderBookUid = ""
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.odds_uid":
		x.OddsUid = ""
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.fulfillment_queue":
		x.FulfillmentQueue = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookOddsExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookOddsExposure does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OrderBookOddsExposure) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.order_book_uid":
		value := x.OrderBookUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.odds_uid":
		value := x.OddsUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.fulfillment_queue":
		if len(x.FulfillmentQueue) == 0 {
			return protoreflect.ValueOfList(&_OrderBookOddsExposure_3_list{})
		}
		listValue := &_OrderBookOddsExposure_3_list{list: &x.FulfillmentQueue}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookOddsExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookOddsExposure does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookOddsExposure) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.order_book_uid":
		x.OrderBookUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.odds_uid":
		x.OddsUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.fulfillment_queue":
		lv := value.List()
		clv := lv.(*_OrderBookOddsExposure_3_list)
		x.FulfillmentQueue = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookOddsExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookOddsExposure does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookOddsExposure) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.fulfillment_queue":
		if x.FulfillmentQueue == nil {
			x.FulfillmentQueue = []uint64{}
		}
		value := &_OrderBookOddsExposure_3_list{list: &x.FulfillmentQueue}
		return protoreflect.ValueOfList(value)
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.order_book_uid":
		panic(fmt.Errorf("field order_book_uid of message sgenetwork.sge.orderbook.OrderBookOddsExposure is not mutable"))
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.odds_uid":
		panic(fmt.Errorf("field odds_uid of message sgenetwork.sge.orderbook.OrderBookOddsExposure is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookOddsExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookOddsExposure does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OrderBookOddsExposure) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.order_book_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.odds_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.OrderBookOddsExposure.fulfillment_queue":
		list := []uint64{}
		return protoreflect.ValueOfList(&_OrderBookOddsExposure_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.OrderBookOddsExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.OrderBookOddsExposure does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OrderBookOddsExposure) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.orderbook.OrderBookOddsExposure", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OrderBookOddsExposure) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OrderBookOddsExposure) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OrderBookOddsExposure) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OrderBookOddsExposure) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OrderBookOddsExposure)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OrderBookUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OddsUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.FulfillmentQueue) > 0 {
			l = 0
			for _, e := range x.FulfillmentQueue {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OrderBookOddsExposure)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.FulfillmentQueue) > 0 {
			var pksize2 int
			for _, num := range x.FulfillmentQueue {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.FulfillmentQueue {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OddsUid) > 0 {
			i -= len(x.OddsUid)
			copy(dAtA[i:], x.OddsUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OddsUid)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OrderBookUid) > 0 {
			i -= len(x.OrderBookUid)
			copy(dAtA[i:], x.OrderBookUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderBookUid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OrderBookOddsExposure)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderBookOddsExposure: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OrderBookOddsExposure: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderBookUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderBookUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OddsUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OddsUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.FulfillmentQueue = append(x.FulfillmentQueue, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.FulfillmentQueue) == 0 {
						x.FulfillmentQueue = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.FulfillmentQueue = append(x.FulfillmentQueue, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FulfillmentQueue", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ParticipationExposure                     protoreflect.MessageDescriptor
	fd_ParticipationExposure_order_book_uid      protoreflect.FieldDescriptor
	fd_ParticipationExposure_odds_uid            protoreflect.FieldDescriptor
	fd_ParticipationExposure_participation_index protoreflect.FieldDescriptor
	fd_ParticipationExposure_exposure            protoreflect.FieldDescriptor
	fd_ParticipationExposure_bet_amount          protoreflect.FieldDescriptor
	fd_ParticipationExposure_is_fulfilled        protoreflect.FieldDescriptor
	fd_ParticipationExposure_round               protoreflect.FieldDescriptor
)

func init() {
	file_sgenetwork_sge_orderbook_exposure_proto_init()
	md_ParticipationExposure = File_sgenetwork_sge_orderbook_exposure_proto.Messages().ByName("ParticipationExposure")
	fd_ParticipationExposure_order_book_uid = md_ParticipationExposure.Fields().ByName("order_book_uid")
	fd_ParticipationExposure_odds_uid = md_ParticipationExposure.Fields().ByName("odds_uid")
	fd_ParticipationExposure_participation_index = md_ParticipationExposure.Fields().ByName("participation_index")
	fd_ParticipationExposure_exposure = md_ParticipationExposure.Fields().ByName("exposure")
	fd_ParticipationExposure_bet_amount = md_ParticipationExposure.Fields().ByName("bet_amount")
	fd_ParticipationExposure_is_fulfilled = md_ParticipationExposure.Fields().ByName("is_fulfilled")
	fd_ParticipationExposure_round = md_ParticipationExposure.Fields().ByName("round")
}

var _ protoreflect.Message = (*fastReflection_ParticipationExposure)(nil)

type fastReflection_ParticipationExposure ParticipationExposure

func (x *ParticipationExposure) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ParticipationExposure)(x)
}

func (x *ParticipationExposure) slowProtoReflect() protoreflect.Message {
	mi := &file_sgenetwork_sge_orderbook_exposure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ParticipationExposure_messageType fastReflection_ParticipationExposure_messageType
var _ protoreflect.MessageType = fastReflection_ParticipationExposure_messageType{}

type fastReflection_ParticipationExposure_messageType struct{}

func (x fastReflection_ParticipationExposure_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ParticipationExposure)(nil)
}
func (x fastReflection_ParticipationExposure_messageType) New() protoreflect.Message {
	return new(fastReflection_ParticipationExposure)
}
func (x fastReflection_ParticipationExposure_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ParticipationExposure
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ParticipationExposure) Descriptor() protoreflect.MessageDescriptor {
	return md_ParticipationExposure
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ParticipationExposure) Type() protoreflect.MessageType {
	return _fastReflection_ParticipationExposure_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ParticipationExposure) New() protoreflect.Message {
	return new(fastReflection_ParticipationExposure)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ParticipationExposure) Interface() protoreflect.ProtoMessage {
	return (*ParticipationExposure)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ParticipationExposure) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OrderBookUid != "" {
		value := protoreflect.ValueOfString(x.OrderBookUid)
		if !f(fd_ParticipationExposure_order_book_uid, value) {
			return
		}
	}
	if x.OddsUid != "" {
		value := protoreflect.ValueOfString(x.OddsUid)
		if !f(fd_ParticipationExposure_odds_uid, value) {
			return
		}
	}
	if x.ParticipationIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ParticipationIndex)
		if !f(fd_ParticipationExposure_participation_index, value) {
			return
		}
	}
	if x.Exposure != "" {
		value := protoreflect.ValueOfString(x.Exposure)
		if !f(fd_ParticipationExposure_exposure, value) {
			return
		}
	}
	if x.BetAmount != "" {
		value := protoreflect.ValueOfString(x.BetAmount)
		if !f(fd_ParticipationExposure_bet_amount, value) {
			return
		}
	}
	if x.IsFulfilled != false {
		value := protoreflect.ValueOfBool(x.IsFulfilled)
		if !f(fd_ParticipationExposure_is_fulfilled, value) {
			return
		}
	}
	if x.Round != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Round)
		if !f(fd_ParticipationExposure_round, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ParticipationExposure) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationExposure.order_book_uid":
		return x.OrderBookUid != ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.odds_uid":
		return x.OddsUid != ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.participation_index":
		return x.ParticipationIndex != uint64(0)
	case "sgenetwork.sge.orderbook.ParticipationExposure.exposure":
		return x.Exposure != ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.bet_amount":
		return x.BetAmount != ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.is_fulfilled":
		return x.IsFulfilled != false
	case "sgenetwork.sge.orderbook.ParticipationExposure.round":
		return x.Round != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationExposure does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationExposure) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationExposure.order_book_uid":
		x.OrderBookUid = ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.odds_uid":
		x.OddsUid = ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.participation_index":
		x.ParticipationIndex = uint64(0)
	case "sgenetwork.sge.orderbook.ParticipationExposure.exposure":
		x.Exposure = ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.bet_amount":
		x.BetAmount = ""
	case "sgenetwork.sge.orderbook.ParticipationExposure.is_fulfilled":
		x.IsFulfilled = false
	case "sgenetwork.sge.orderbook.ParticipationExposure.round":
		x.Round = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationExposure does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ParticipationExposure) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationExposure.order_book_uid":
		value := x.OrderBookUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.ParticipationExposure.odds_uid":
		value := x.OddsUid
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.ParticipationExposure.participation_index":
		value := x.ParticipationIndex
		return protoreflect.ValueOfUint64(value)
	case "sgenetwork.sge.orderbook.ParticipationExposure.exposure":
		value := x.Exposure
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.ParticipationExposure.bet_amount":
		value := x.BetAmount
		return protoreflect.ValueOfString(value)
	case "sgenetwork.sge.orderbook.ParticipationExposure.is_fulfilled":
		value := x.IsFulfilled
		return protoreflect.ValueOfBool(value)
	case "sgenetwork.sge.orderbook.ParticipationExposure.round":
		value := x.Round
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationExposure does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationExposure) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationExposure.order_book_uid":
		x.OrderBookUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.ParticipationExposure.odds_uid":
		x.OddsUid = value.Interface().(string)
	case "sgenetwork.sge.orderbook.ParticipationExposure.participation_index":
		x.ParticipationIndex = value.Uint()
	case "sgenetwork.sge.orderbook.ParticipationExposure.exposure":
		x.Exposure = value.Interface().(string)
	case "sgenetwork.sge.orderbook.ParticipationExposure.bet_amount":
		x.BetAmount = value.Interface().(string)
	case "sgenetwork.sge.orderbook.ParticipationExposure.is_fulfilled":
		x.IsFulfilled = value.Bool()
	case "sgenetwork.sge.orderbook.ParticipationExposure.round":
		x.Round = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationExposure does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationExposure) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationExposure.order_book_uid":
		panic(fmt.Errorf("field order_book_uid of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationExposure.odds_uid":
		panic(fmt.Errorf("field odds_uid of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationExposure.participation_index":
		panic(fmt.Errorf("field participation_index of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationExposure.exposure":
		panic(fmt.Errorf("field exposure of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationExposure.bet_amount":
		panic(fmt.Errorf("field bet_amount of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationExposure.is_fulfilled":
		panic(fmt.Errorf("field is_fulfilled of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	case "sgenetwork.sge.orderbook.ParticipationExposure.round":
		panic(fmt.Errorf("field round of message sgenetwork.sge.orderbook.ParticipationExposure is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationExposure does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ParticipationExposure) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "sgenetwork.sge.orderbook.ParticipationExposure.order_book_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.ParticipationExposure.odds_uid":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.ParticipationExposure.participation_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "sgenetwork.sge.orderbook.ParticipationExposure.exposure":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.ParticipationExposure.bet_amount":
		return protoreflect.ValueOfString("")
	case "sgenetwork.sge.orderbook.ParticipationExposure.is_fulfilled":
		return protoreflect.ValueOfBool(false)
	case "sgenetwork.sge.orderbook.ParticipationExposure.round":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: sgenetwork.sge.orderbook.ParticipationExposure"))
		}
		panic(fmt.Errorf("message sgenetwork.sge.orderbook.ParticipationExposure does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ParticipationExposure) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in sgenetwork.sge.orderbook.ParticipationExposure", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ParticipationExposure) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ParticipationExposure) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ParticipationExposure) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ParticipationExposure) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ParticipationExposure)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OrderBookUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OddsUid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ParticipationIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.ParticipationIndex))
		}
		l = len(x.Exposure)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BetAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsFulfilled {
			n += 2
		}
		if x.Round != 0 {
			n += 1 + runtime.Sov(uint64(x.Round))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ParticipationExposure)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Round != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Round))
			i--
			dAtA[i] = 0x38
		}
		if x.IsFulfilled {
			i--
			if x.IsFulfilled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if len(x.BetAmount) > 0 {
			i -= len(x.BetAmount)
			copy(dAtA[i:], x.BetAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BetAmount)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Exposure) > 0 {
			i -= len(x.Exposure)
			copy(dAtA[i:], x.Exposure)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Exposure)))
			i--
			dAtA[i] = 0x22
		}
		if x.ParticipationIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ParticipationIndex))
			i--
			dAtA[i] = 0x18
		}
		if len(x.OddsUid) > 0 {
			i -= len(x.OddsUid)
			copy(dAtA[i:], x.OddsUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OddsUid)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OrderBookUid) > 0 {
			i -= len(x.OrderBookUid)
			copy(dAtA[i:], x.OrderBookUid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OrderBookUid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ParticipationExposure)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParticipationExposure: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ParticipationExposure: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderBookUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OrderBookUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OddsUid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OddsUid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
				}
				x.ParticipationIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ParticipationIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Exposure", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Exposure = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BetAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsFulfilled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsFulfilled = bool(v != 0)
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
				}
				x.Round = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Round |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: sgenetwork/sge/orderbook/exposure.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrderBookOddsExposure represents the exposures taken on odds.
type OrderBookOddsExposure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order_book_uid is the universally unique identifier corresponding to the
	// order book.
	OrderBookUid string `protobuf:"bytes,1,opt,name=order_book_uid,proto3" json:"order_book_uid,omitempty"`
	// odds_uid is the universally unique identifier of the odds.
	OddsUid string `protobuf:"bytes,2,opt,name=odds_uid,proto3" json:"odds_uid,omitempty"`
	// fulfillment_queue is the slice of indices of participations to be
	// fulfilled.
	FulfillmentQueue []uint64 `protobuf:"varint,3,rep,packed,name=fulfillment_queue,json=fulfillmentQueue,proto3" json:"fulfillment_queue,omitempty"`
}

func (x *OrderBookOddsExposure) Reset() {
	*x = OrderBookOddsExposure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_orderbook_exposure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookOddsExposure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookOddsExposure) ProtoMessage() {}

// Deprecated: Use OrderBookOddsExposure.ProtoReflect.Descriptor instead.
func (*OrderBookOddsExposure) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_orderbook_exposure_proto_rawDescGZIP(), []int{0}
}

func (x *OrderBookOddsExposure) GetOrderBookUid() string {
	if x != nil {
		return x.OrderBookUid
	}
	return ""
}

func (x *OrderBookOddsExposure) GetOddsUid() string {
	if x != nil {
		return x.OddsUid
	}
	return ""
}

func (x *OrderBookOddsExposure) GetFulfillmentQueue() []uint64 {
	if x != nil {
		return x.FulfillmentQueue
	}
	return nil
}

// ParticipationExposure represents the exposures taken on odds by
// participations.
type ParticipationExposure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order_book_uid is the universally unique identifier of the order book that
	// the exposure is being set.
	OrderBookUid string `protobuf:"bytes,1,opt,name=order_book_uid,proto3" json:"order_book_uid,omitempty"`
	// odds_uid is the odds universal unique identifier that the exposure is being
	// set.
	OddsUid string `protobuf:"bytes,2,opt,name=odds_uid,proto3" json:"odds_uid,omitempty"`
	// participation_index is the index of participation in the queue.
	ParticipationIndex uint64 `protobuf:"varint,3,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty"`
	// exposure is the total exposure taken on given odds.
	Exposure string `protobuf:"bytes,4,opt,name=exposure,proto3" json:"exposure,omitempty"`
	// bet_amount is the total bet amount corresponding to the exposure.
	BetAmount string `protobuf:"bytes,5,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`
	// is_fulfilled represents if the participation exposure is fulfilled or not.
	IsFulfilled bool `protobuf:"varint,6,opt,name=is_fulfilled,json=isFulfilled,proto3" json:"is_fulfilled,omitempty"`
	// round is the current round number in the queue.
	Round uint64 `protobuf:"varint,7,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *ParticipationExposure) Reset() {
	*x = ParticipationExposure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sgenetwork_sge_orderbook_exposure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipationExposure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipationExposure) ProtoMessage() {}

// Deprecated: Use ParticipationExposure.ProtoReflect.Descriptor instead.
func (*ParticipationExposure) Descriptor() ([]byte, []int) {
	return file_sgenetwork_sge_orderbook_exposure_proto_rawDescGZIP(), []int{1}
}

func (x *ParticipationExposure) GetOrderBookUid() string {
	if x != nil {
		return x.OrderBookUid
	}
	return ""
}

func (x *ParticipationExposure) GetOddsUid() string {
	if x != nil {
		return x.OddsUid
	}
	return ""
}

func (x *ParticipationExposure) GetParticipationIndex() uint64 {
	if x != nil {
		return x.ParticipationIndex
	}
	return 0
}

func (x *ParticipationExposure) GetExposure() string {
	if x != nil {
		return x.Exposure
	}
	return ""
}

func (x *ParticipationExposure) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *ParticipationExposure) GetIsFulfilled() bool {
	if x != nil {
		return x.IsFulfilled
	}
	return false
}

func (x *ParticipationExposure) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

var File_sgenetwork_sge_orderbook_exposure_proto protoreflect.FileDescriptor

var file_sgenetwork_sge_orderbook_exposure_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x67, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x73, 0x67, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4f, 0x64, 0x64, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xde, 0x1f,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x49, 0x44, 0xea, 0xde, 0x1f,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x52,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x17, 0xe2, 0xde, 0x1f, 0x07, 0x4f, 0x64, 0x64, 0x73, 0x55, 0x49, 0x44, 0xea, 0xde,
	0x1f, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x08, 0x6f, 0x64, 0x64, 0x73,
	0x5f, 0x75, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42,
	0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x52, 0x10, 0x66,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x3a,
	0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xfc, 0x03,
	0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0xe2, 0xde, 0x1f, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x49,
	0x44, 0xea, 0xde, 0x1f, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x75, 0x69, 0x64, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xe2, 0xde, 0x1f, 0x07, 0x4f, 0x64, 0x64, 0x73, 0x55,
	0x49, 0x44, 0xea, 0xde, 0x1f, 0x08, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x52, 0x08,
	0x6f, 0x64, 0x64, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0xf2, 0xde, 0x1f, 0x1a, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x22, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52,
	0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x69, 0x73, 0x5f, 0x66,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x10, 0xf2, 0xde, 0x1f, 0x0c, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x0c,
	0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x42, 0xe8, 0x01, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x73, 0x67, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x42, 0x0d, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x67, 0x65, 0x2d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x67, 0x65, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x4f, 0xaa, 0x02, 0x18,
	0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x67, 0x65, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0xca, 0x02, 0x18, 0x53, 0x67, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5c, 0x53, 0x67, 0x65, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0xe2, 0x02, 0x24, 0x53, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5c, 0x53, 0x67, 0x65, 0x5c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x53, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x3a, 0x53, 0x67, 0x65, 0x3a, 0x3a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sgenetwork_sge_orderbook_exposure_proto_rawDescOnce sync.Once
	file_sgenetwork_sge_orderbook_exposure_proto_rawDescData = file_sgenetwork_sge_orderbook_exposure_proto_rawDesc
)

func file_sgenetwork_sge_orderbook_exposure_proto_rawDescGZIP() []byte {
	file_sgenetwork_sge_orderbook_exposure_proto_rawDescOnce.Do(func() {
		file_sgenetwork_sge_orderbook_exposure_proto_rawDescData = protoimpl.X.CompressGZIP(file_sgenetwork_sge_orderbook_exposure_proto_rawDescData)
	})
	return file_sgenetwork_sge_orderbook_exposure_proto_rawDescData
}

var file_sgenetwork_sge_orderbook_exposure_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sgenetwork_sge_orderbook_exposure_proto_goTypes = []interface{}{
	(*OrderBookOddsExposure)(nil), // 0: sgenetwork.sge.orderbook.OrderBookOddsExposure
	(*ParticipationExposure)(nil), // 1: sgenetwork.sge.orderbook.ParticipationExposure
}
var file_sgenetwork_sge_orderbook_exposure_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sgenetwork_sge_orderbook_exposure_proto_init() }
func file_sgenetwork_sge_orderbook_exposure_proto_init() {
	if File_sgenetwork_sge_orderbook_exposure_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sgenetwork_sge_orderbook_exposure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookOddsExposure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sgenetwork_sge_orderbook_exposure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipationExposure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sgenetwork_sge_orderbook_exposure_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sgenetwork_sge_orderbook_exposure_proto_goTypes,
		DependencyIndexes: file_sgenetwork_sge_orderbook_exposure_proto_depIdxs,
		MessageInfos:      file_sgenetwork_sge_orderbook_exposure_proto_msgTypes,
	}.Build()
	File_sgenetwork_sge_orderbook_exposure_proto = out.File
	file_sgenetwork_sge_orderbook_exposure_proto_rawDesc = nil
	file_sgenetwork_sge_orderbook_exposure_proto_goTypes = nil
	file_sgenetwork_sge_orderbook_exposure_proto_depIdxs = nil
}
