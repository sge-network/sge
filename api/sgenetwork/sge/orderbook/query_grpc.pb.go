// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sgenetwork/sge/orderbook/query.proto

package orderbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Params_FullMethodName                                 = "/sgenetwork.sge.orderbook.Query/Params"
	Query_OrderBooks_FullMethodName                             = "/sgenetwork.sge.orderbook.Query/OrderBooks"
	Query_OrderBook_FullMethodName                              = "/sgenetwork.sge.orderbook.Query/OrderBook"
	Query_OrderBookParticipations_FullMethodName                = "/sgenetwork.sge.orderbook.Query/OrderBookParticipations"
	Query_OrderBookParticipation_FullMethodName                 = "/sgenetwork.sge.orderbook.Query/OrderBookParticipation"
	Query_OrderBookExposures_FullMethodName                     = "/sgenetwork.sge.orderbook.Query/OrderBookExposures"
	Query_OrderBookExposure_FullMethodName                      = "/sgenetwork.sge.orderbook.Query/OrderBookExposure"
	Query_OrderBookParticipationExposures_FullMethodName        = "/sgenetwork.sge.orderbook.Query/OrderBookParticipationExposures"
	Query_ParticipationExposures_FullMethodName                 = "/sgenetwork.sge.orderbook.Query/ParticipationExposures"
	Query_HistoricalParticipationExposures_FullMethodName       = "/sgenetwork.sge.orderbook.Query/HistoricalParticipationExposures"
	Query_ParticipationFulfilledBets_FullMethodName             = "/sgenetwork.sge.orderbook.Query/ParticipationFulfilledBets"
	Query_SettledOrderBookParticipationsOfHeight_FullMethodName = "/sgenetwork.sge.orderbook.Query/SettledOrderBookParticipationsOfHeight"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OrderBooks queries all order books that match the given status.
	OrderBooks(ctx context.Context, in *QueryOrderBooksRequest, opts ...grpc.CallOption) (*QueryOrderBooksResponse, error)
	// OrderBook queries order book info for given order book universal unique
	// identifier.
	OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error)
	// OrderBookParticipations queries participation info for given order book.
	OrderBookParticipations(ctx context.Context, in *QueryOrderBookParticipationsRequest, opts ...grpc.CallOption) (*QueryOrderBookParticipationsResponse, error)
	// OrderBookParticipation queries participation info for given order book and
	// participation index.
	OrderBookParticipation(ctx context.Context, in *QueryOrderBookParticipationRequest, opts ...grpc.CallOption) (*QueryOrderBookParticipationResponse, error)
	// OrderBookExposures queries exposures info for the given order book.
	OrderBookExposures(ctx context.Context, in *QueryOrderBookExposuresRequest, opts ...grpc.CallOption) (*QueryOrderBookExposuresResponse, error)
	// OrderBookExposure queries exposure info for the given order book and odds
	// universal unique identifier.
	OrderBookExposure(ctx context.Context, in *QueryOrderBookExposureRequest, opts ...grpc.CallOption) (*QueryOrderBookExposureResponse, error)
	// OrderBookParticipationExposures queries exposures info for given order book
	// participations.
	OrderBookParticipationExposures(ctx context.Context, in *QueryOrderBookParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryOrderBookParticipationExposuresResponse, error)
	// ParticipationExposures queries exposure info for given order book
	// participation.
	ParticipationExposures(ctx context.Context, in *QueryParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryParticipationExposuresResponse, error)
	// HistoricalParticipationExposures queries historical exposures info for
	// the given order book participation.
	HistoricalParticipationExposures(ctx context.Context, in *QueryHistoricalParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryHistoricalParticipationExposuresResponse, error)
	// ParticipationFulfilledBets queries fulfilled bets for given order book
	// participation.
	ParticipationFulfilledBets(ctx context.Context, in *QueryParticipationFulfilledBetsRequest, opts ...grpc.CallOption) (*QueryParticipationFulfilledBetsResponse, error)
	// Queries list of settled Orderbook Participation items of a certain height.
	SettledOrderBookParticipationsOfHeight(ctx context.Context, in *QuerySettledOrderBookParticipationsOfHeightRequest, opts ...grpc.CallOption) (*QuerySettledOrderBookParticipationsOfHeightResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBooks(ctx context.Context, in *QueryOrderBooksRequest, opts ...grpc.CallOption) (*QueryOrderBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBooksResponse)
	err := c.cc.Invoke(ctx, Query_OrderBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBook(ctx context.Context, in *QueryOrderBookRequest, opts ...grpc.CallOption) (*QueryOrderBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBookResponse)
	err := c.cc.Invoke(ctx, Query_OrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBookParticipations(ctx context.Context, in *QueryOrderBookParticipationsRequest, opts ...grpc.CallOption) (*QueryOrderBookParticipationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBookParticipationsResponse)
	err := c.cc.Invoke(ctx, Query_OrderBookParticipations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBookParticipation(ctx context.Context, in *QueryOrderBookParticipationRequest, opts ...grpc.CallOption) (*QueryOrderBookParticipationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBookParticipationResponse)
	err := c.cc.Invoke(ctx, Query_OrderBookParticipation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBookExposures(ctx context.Context, in *QueryOrderBookExposuresRequest, opts ...grpc.CallOption) (*QueryOrderBookExposuresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBookExposuresResponse)
	err := c.cc.Invoke(ctx, Query_OrderBookExposures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBookExposure(ctx context.Context, in *QueryOrderBookExposureRequest, opts ...grpc.CallOption) (*QueryOrderBookExposureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBookExposureResponse)
	err := c.cc.Invoke(ctx, Query_OrderBookExposure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderBookParticipationExposures(ctx context.Context, in *QueryOrderBookParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryOrderBookParticipationExposuresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOrderBookParticipationExposuresResponse)
	err := c.cc.Invoke(ctx, Query_OrderBookParticipationExposures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipationExposures(ctx context.Context, in *QueryParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryParticipationExposuresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParticipationExposuresResponse)
	err := c.cc.Invoke(ctx, Query_ParticipationExposures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalParticipationExposures(ctx context.Context, in *QueryHistoricalParticipationExposuresRequest, opts ...grpc.CallOption) (*QueryHistoricalParticipationExposuresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryHistoricalParticipationExposuresResponse)
	err := c.cc.Invoke(ctx, Query_HistoricalParticipationExposures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ParticipationFulfilledBets(ctx context.Context, in *QueryParticipationFulfilledBetsRequest, opts ...grpc.CallOption) (*QueryParticipationFulfilledBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParticipationFulfilledBetsResponse)
	err := c.cc.Invoke(ctx, Query_ParticipationFulfilledBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettledOrderBookParticipationsOfHeight(ctx context.Context, in *QuerySettledOrderBookParticipationsOfHeightRequest, opts ...grpc.CallOption) (*QuerySettledOrderBookParticipationsOfHeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySettledOrderBookParticipationsOfHeightResponse)
	err := c.cc.Invoke(ctx, Query_SettledOrderBookParticipationsOfHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// OrderBooks queries all order books that match the given status.
	OrderBooks(context.Context, *QueryOrderBooksRequest) (*QueryOrderBooksResponse, error)
	// OrderBook queries order book info for given order book universal unique
	// identifier.
	OrderBook(context.Context, *QueryOrderBookRequest) (*QueryOrderBookResponse, error)
	// OrderBookParticipations queries participation info for given order book.
	OrderBookParticipations(context.Context, *QueryOrderBookParticipationsRequest) (*QueryOrderBookParticipationsResponse, error)
	// OrderBookParticipation queries participation info for given order book and
	// participation index.
	OrderBookParticipation(context.Context, *QueryOrderBookParticipationRequest) (*QueryOrderBookParticipationResponse, error)
	// OrderBookExposures queries exposures info for the given order book.
	OrderBookExposures(context.Context, *QueryOrderBookExposuresRequest) (*QueryOrderBookExposuresResponse, error)
	// OrderBookExposure queries exposure info for the given order book and odds
	// universal unique identifier.
	OrderBookExposure(context.Context, *QueryOrderBookExposureRequest) (*QueryOrderBookExposureResponse, error)
	// OrderBookParticipationExposures queries exposures info for given order book
	// participations.
	OrderBookParticipationExposures(context.Context, *QueryOrderBookParticipationExposuresRequest) (*QueryOrderBookParticipationExposuresResponse, error)
	// ParticipationExposures queries exposure info for given order book
	// participation.
	ParticipationExposures(context.Context, *QueryParticipationExposuresRequest) (*QueryParticipationExposuresResponse, error)
	// HistoricalParticipationExposures queries historical exposures info for
	// the given order book participation.
	HistoricalParticipationExposures(context.Context, *QueryHistoricalParticipationExposuresRequest) (*QueryHistoricalParticipationExposuresResponse, error)
	// ParticipationFulfilledBets queries fulfilled bets for given order book
	// participation.
	ParticipationFulfilledBets(context.Context, *QueryParticipationFulfilledBetsRequest) (*QueryParticipationFulfilledBetsResponse, error)
	// Queries list of settled Orderbook Participation items of a certain height.
	SettledOrderBookParticipationsOfHeight(context.Context, *QuerySettledOrderBookParticipationsOfHeightRequest) (*QuerySettledOrderBookParticipationsOfHeightResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) OrderBooks(context.Context, *QueryOrderBooksRequest) (*QueryOrderBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBooks not implemented")
}
func (UnimplementedQueryServer) OrderBook(context.Context, *QueryOrderBookRequest) (*QueryOrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (UnimplementedQueryServer) OrderBookParticipations(context.Context, *QueryOrderBookParticipationsRequest) (*QueryOrderBookParticipationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBookParticipations not implemented")
}
func (UnimplementedQueryServer) OrderBookParticipation(context.Context, *QueryOrderBookParticipationRequest) (*QueryOrderBookParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBookParticipation not implemented")
}
func (UnimplementedQueryServer) OrderBookExposures(context.Context, *QueryOrderBookExposuresRequest) (*QueryOrderBookExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBookExposures not implemented")
}
func (UnimplementedQueryServer) OrderBookExposure(context.Context, *QueryOrderBookExposureRequest) (*QueryOrderBookExposureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBookExposure not implemented")
}
func (UnimplementedQueryServer) OrderBookParticipationExposures(context.Context, *QueryOrderBookParticipationExposuresRequest) (*QueryOrderBookParticipationExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBookParticipationExposures not implemented")
}
func (UnimplementedQueryServer) ParticipationExposures(context.Context, *QueryParticipationExposuresRequest) (*QueryParticipationExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipationExposures not implemented")
}
func (UnimplementedQueryServer) HistoricalParticipationExposures(context.Context, *QueryHistoricalParticipationExposuresRequest) (*QueryHistoricalParticipationExposuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalParticipationExposures not implemented")
}
func (UnimplementedQueryServer) ParticipationFulfilledBets(context.Context, *QueryParticipationFulfilledBetsRequest) (*QueryParticipationFulfilledBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipationFulfilledBets not implemented")
}
func (UnimplementedQueryServer) SettledOrderBookParticipationsOfHeight(context.Context, *QuerySettledOrderBookParticipationsOfHeightRequest) (*QuerySettledOrderBookParticipationsOfHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettledOrderBookParticipationsOfHeight not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBooks(ctx, req.(*QueryOrderBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBook(ctx, req.(*QueryOrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBookParticipations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookParticipationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBookParticipations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBookParticipations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBookParticipations(ctx, req.(*QueryOrderBookParticipationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBookParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBookParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBookParticipation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBookParticipation(ctx, req.(*QueryOrderBookParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBookExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBookExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBookExposures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBookExposures(ctx, req.(*QueryOrderBookExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBookExposure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookExposureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBookExposure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBookExposure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBookExposure(ctx, req.(*QueryOrderBookExposureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderBookParticipationExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderBookParticipationExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderBookParticipationExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OrderBookParticipationExposures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderBookParticipationExposures(ctx, req.(*QueryOrderBookParticipationExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipationExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipationExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipationExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ParticipationExposures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipationExposures(ctx, req.(*QueryParticipationExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalParticipationExposures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalParticipationExposuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalParticipationExposures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HistoricalParticipationExposures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalParticipationExposures(ctx, req.(*QueryHistoricalParticipationExposuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ParticipationFulfilledBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParticipationFulfilledBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ParticipationFulfilledBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ParticipationFulfilledBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ParticipationFulfilledBets(ctx, req.(*QueryParticipationFulfilledBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettledOrderBookParticipationsOfHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySettledOrderBookParticipationsOfHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettledOrderBookParticipationsOfHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SettledOrderBookParticipationsOfHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettledOrderBookParticipationsOfHeight(ctx, req.(*QuerySettledOrderBookParticipationsOfHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sgenetwork.sge.orderbook.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OrderBooks",
			Handler:    _Query_OrderBooks_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _Query_OrderBook_Handler,
		},
		{
			MethodName: "OrderBookParticipations",
			Handler:    _Query_OrderBookParticipations_Handler,
		},
		{
			MethodName: "OrderBookParticipation",
			Handler:    _Query_OrderBookParticipation_Handler,
		},
		{
			MethodName: "OrderBookExposures",
			Handler:    _Query_OrderBookExposures_Handler,
		},
		{
			MethodName: "OrderBookExposure",
			Handler:    _Query_OrderBookExposure_Handler,
		},
		{
			MethodName: "OrderBookParticipationExposures",
			Handler:    _Query_OrderBookParticipationExposures_Handler,
		},
		{
			MethodName: "ParticipationExposures",
			Handler:    _Query_ParticipationExposures_Handler,
		},
		{
			MethodName: "HistoricalParticipationExposures",
			Handler:    _Query_HistoricalParticipationExposures_Handler,
		},
		{
			MethodName: "ParticipationFulfilledBets",
			Handler:    _Query_ParticipationFulfilledBets_Handler,
		},
		{
			MethodName: "SettledOrderBookParticipationsOfHeight",
			Handler:    _Query_SettledOrderBookParticipationsOfHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sgenetwork/sge/orderbook/query.proto",
}
