syntax = "proto3";
package sgenetwork.sge.market;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sgenetwork/sge/market/market.proto";
import "sgenetwork/sge/market/params.proto";

option go_package = "github.com/sge-network/sge/x/legacy/market/types";

// Msg defines the Msg service.
service Msg {
  // Add defines a method to add the market with the given data.
  rpc Add(MsgAdd) returns (MsgAddResponse) { option deprecated = true; }
  // Resolve defines a method to resolve the market.
  rpc Resolve(MsgResolve) returns (MsgResolveResponse) {
    option deprecated = true;
  }
  // Update defines a method to update a market.
  rpc Update(MsgUpdate) returns (MsgUpdateResponse) {
    option deprecated = true;
  }
  // UpdateParams defines a governance operation for updating the x/market
  // module parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (cosmos_proto.method_added_in) = "sge-network 1.7.1";
    option deprecated = true;
  }
}

// MsgAdd is the message type for adding the market into the
// state.
message MsgAdd {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the address of the creator account of the market.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgAddResponse response for adding market.
message MsgAddResponse {
  // error contains an error if adding a market faces any issues.
  string error = 1 [ (gogoproto.nullable) = true ];
  // data is the data of market.
  Market data = 2 [ (gogoproto.nullable) = true ];
}

// MsgResolve is the message type for resolving a market.
message MsgResolve {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the address of the creator account of the market.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgResolveResponse response for resolving a market.
message MsgResolveResponse {
  // error contains an error if resolving a market faces any issues.
  string error = 1 [ (gogoproto.nullable) = true ];
  // data is the data of market.
  Market data = 2 [ (gogoproto.nullable) = true ];
}

// MsgUpdate is the message type for updating market data.
// in the state
message MsgUpdate {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the address of the creator account of the market.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgUpdateResponse response for updating a market.
message MsgUpdateResponse {
  // error contains an error if updating a market faces any issues.
  string error = 1 [ (gogoproto.nullable) = true ];
  // data is the data of market
  Market data = 2 [ (gogoproto.nullable) = true ];
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/bet parameters.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
}
