syntax = "proto3";
package sgenetwork.sge.house;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sgenetwork/sge/house/params.proto";
import "sgenetwork/sge/house/withdraw.proto";

option go_package = "github.com/sge-network/sge/x/legacy/house/types";

// Msg defines the house Msg service.
service Msg {
  // Deposit defines a method for performing a deposit of tokens to become part
  // of the order book or be the house for an order book corresponding to a
  // market.
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse) {
    option deprecated = true;
  }

  // Withdraw defines a method for performing a withdrawal of tokens of unused
  // amount corresponding to a deposit.
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse) {
    option deprecated = true;
  }

  // UpdateParams defines a governance operation for updating the x/house module
  // parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (cosmos_proto.method_added_in) = "sge-network 1.7.1";
    option deprecated = true;
  }
}

// MsgDeposit defines a SDK message for performing a deposit of coins to become
// part of the house corresponding to a market.
message MsgDeposit {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the account who makes a deposit
  string creator = 1 [ (gogoproto.moretags) = "yaml:\"creator\"" ];
  // market_uid is the uid of market/order book against which deposit is being
  // made.
  string market_uid = 2 [
    (gogoproto.customname) = "MarketUID",
    (gogoproto.jsontag) = "market_uid",
    json_name = "market_uid"
  ];
  // amount is the amount being deposited on an order book to be a house
  string amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // ticket is the jwt ticket data.
  string ticket = 4;
}

// MsgDepositResponse defines the Msg/Deposit response type.
message MsgDepositResponse {
  // market_uid is the uid of market/order book against which deposit is being
  // made.
  string market_uid = 1 [
    (gogoproto.customname) = "MarketUID",
    (gogoproto.jsontag) = "market_uid",
    json_name = "market_uid"
  ];
  // participation_index is the index corresponding to the order book
  // participation
  uint64 participation_index = 2
      [ (gogoproto.moretags) = "yaml:\"participation_index\"" ];
}

// MsgWithdraw defines a SDK message for performing a withdrawal of coins of
// unused amount corresponding to a deposit.
message MsgWithdraw {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.moretags) = "yaml:\"creator\""
  ];
  string market_uid = 2 [
    (gogoproto.customname) = "MarketUID",
    (gogoproto.jsontag) = "market_uid",
    json_name = "market_uid"
  ];
  // participation_index is the index corresponding to the order book
  // participation
  uint64 participation_index = 3
      [ (gogoproto.moretags) = "yaml:\"participation_index\"" ];
  // mode is the withdrawal mode. It can be full or partial withdraw
  WithdrawalMode mode = 4 [ (gogoproto.moretags) = "yaml:\"mode\"" ];
  // amount is the requested withdrawal amount
  string amount = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // ticket is the jwt ticket data.
  string ticket = 6;
}

// MsgWithdrawResponse defines the Msg/Withdraw response type.
message MsgWithdrawResponse {
  // id is the unique identifier for the withdrawal
  uint64 id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id",
    json_name = "id",
    (gogoproto.moretags) = "yaml:\"id\""
  ];
  // market_uid is the id of market/order book from which withdrawal is made
  string market_uid = 2 [
    (gogoproto.customname) = "MarketUID",
    (gogoproto.jsontag) = "market_uid",
    json_name = "market_uid"
  ];
  // participation_index is the index in order book from which withdrawal is
  // made
  uint64 participation_index = 3
      [ (gogoproto.moretags) = "yaml:\"participation_index\"" ];
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/bet parameters.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
}
