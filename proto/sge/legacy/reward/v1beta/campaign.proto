syntax = "proto3";
package sge.legacy.reward.v1beta;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sge/legacy/reward/v1beta/reward.proto";

option go_package = "github.com/sge-network/sge/x/legacy/reward/types";

// Campaign is type for defining the campaign properties.
message Campaign {
  // creator is the address of campaign creator.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // uid is the unique identifier of a campaign.
  string uid = 2 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // promoter is the address of campaign promoter.
  // Funds for the campaign would be deducted from this account.
  string promoter = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // start_ts is the start timestamp of a campaign.
  uint64 start_ts = 4 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];

  // end_ts is the end timestamp of a campaign.
  uint64 end_ts = 5 [
    (gogoproto.customname) = "EndTS",
    (gogoproto.jsontag) = "end_ts",
    json_name = "end_ts"
  ];

  // reward_category is the category of reward.
  RewardCategory reward_category = 6;

  // reward_type is the type of reward.
  RewardType reward_type = 7;

  // amount_type is the type of reward amount.
  RewardAmountType reward_amount_type = 8;

  // reward_amount is the amount defined for a reward.
  RewardAmount reward_amount = 9;

  // pool is the tracker of campaign funds.
  Pool pool = 10 [ (gogoproto.nullable) = false ];

  // is_active is the flag to check if the campaign is active or not.
  bool is_active = 11;

  // meta is the metadata of the campaign.
  // It is a stringified base64 encoded json.
  string meta = 13;

  // cap_count is the maximum allowed grant for a certain account.
  uint64 cap_count = 14;

  // constraints is the constrains of a campaign.
  CampaignConstraints constraints = 15;
}

// Pool tracks funds assigned and spent to/for a campaign.
message Pool {
  string total = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"total\""
  ];
  string spent = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"spent\""
  ];
  string withdrawn = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"spent\""
  ];
}

// CampaignConstraints contains campaign constraints and criteria.
message CampaignConstraints {
  string max_bet_amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_bet_amount\""
  ];
}
