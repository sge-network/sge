syntax = "proto3";
package sge.legacy.reward.v1beta;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/sge-network/sge/x/legacy/reward/types";

// Reward is the type for transaction made to reward a user
// based on users eligibility.
message Reward {
  // uid is the unique identifier for a reward.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // creator is the address of the account that invokes the reward transaction.
  string creator = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // receiver is the address of the account that receives the reward.
  string receiver = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // campaign_uid is the unique identifier of the campaign.
  string campaign_uid = 4 [
    (gogoproto.customname) = "CampaignUID",
    (gogoproto.jsontag) = "campaign_uid",
    json_name = "campaign_uid"
  ];

  // reward_amount is the amount of the reward.
  RewardAmount reward_amount = 7 [
    (gogoproto.customname) = "RewardAmount",
    (gogoproto.jsontag) = "reward_amount",
    json_name = "reward_amount"
  ];

  // source_uid is the address of the source.
  // It is used to identify the source of the reward.
  // For example, the source uid of a referral signup
  // reward is the address of the referer.
  string source_uid = 8 [
    (gogoproto.customname) = "SourceUID",
    (gogoproto.jsontag) = "source_uid",
    json_name = "source_uid"
  ];

  // meta is the metadata of the campaign.
  // It is a stringified base64 encoded json.
  string meta = 12;
}

// RewardAmount
message RewardAmount {
  // main_account_amount transferred to main account address
  string main_account_amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"main_account_amount\""
  ];

  // subaccount_amount transferred to subaccount address
  string subaccount_amount = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"subaccount_amount\""
  ];

  // unlock_period is the period after which the reward is unlocked.
  uint64 unlock_period = 3 [
    (gogoproto.customname) = "UnlockPeriod",
    (gogoproto.jsontag) = "unlock_period",
    json_name = "unlock_period"
  ];

  // main_account_percentage transferred to main account address
  string main_account_percentage = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"main_account_percentage\""
  ];

  // subaccount_percentage amount transferred to subaccount address
  string subaccount_percentage = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"subaccount_percentage\""
  ];
}

// RewardByCategory
message RewardByCategory {
  // uid is the unique identifier for a reward.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // addr is the address of the reward receiver.
  string addr = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // reward_category is the category of the reward.
  RewardCategory reward_category = 3;
}

// RewardByCampaign
message RewardByCampaign {
  // uid is the unique identifier for a reward.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // campaign_uid is the unique identifier of the campaign.
  string campaign_uid = 2 [
    (gogoproto.customname) = "CampaignUID",
    (gogoproto.jsontag) = "campaign_uid",
    json_name = "campaign_uid"
  ];
}

// RewardType defines supported types of rewards in reward module.
enum RewardCategory {
  // the invalid or unknown
  REWARD_CATEGORY_UNSPECIFIED = 0;

  // signup reward
  REWARD_CATEGORY_SIGNUP = 1;

  // referral reward
  REWARD_CATEGORY_REFERRAL = 2;

  // affiliate reward
  REWARD_CATEGORY_AFFILIATE = 3;

  // bet refunds
  REWARD_CATEGORY_BET_REFUND = 4;

  // milestone reward
  REWARD_CATEGORY_MILESTONE = 5;

  // bet discounts
  REWARD_CATEGORY_BET_DISCOUNT = 6;

  // other rewards
  REWARD_CATEGORY_OTHER = 7;
}

// RewardType defines supported types of rewards of reward module.
enum RewardType {
  // the invalid or unknown
  REWARD_TYPE_UNSPECIFIED = 0;

  // signup reward
  REWARD_TYPE_SIGNUP = 1;

  // referral signup reward
  REWARD_TYPE_REFERRAL_SIGNUP = 2;

  // affiliate signup reward
  REWARD_TYPE_AFFILIATE_SIGNUP = 3;

  // referral reward
  REWARD_TYPE_REFERRAL = 4;

  // affiliate reward
  REWARD_TYPE_AFFILIATE = 5;

  // bet refunds
  REWARD_TYPE_BET_REFUND = 6;

  // milestone reward
  REWARD_TYPE_MILESTONE = 7;

  // bet discounts
  REWARD_TYPE_BET_DISCOUNT = 8;

  // other rewards
  REWARD_TYPE_OTHER = 9;
}

// RewardType defines supported types of rewards of reward module.
enum RewardAmountType {
  // the invalid or unknown
  REWARD_AMOUNT_TYPE_UNSPECIFIED = 0;

  // Fixed amount
  REWARD_AMOUNT_TYPE_FIXED = 1;

  // Business logic defined amount
  REWARD_AMOUNT_TYPE_LOGIC = 2;

  // Percentage of bet amount
  REWARD_AMOUNT_TYPE_PERCENTAGE = 3;
}
