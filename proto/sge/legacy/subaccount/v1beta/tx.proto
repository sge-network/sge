syntax = "proto3";
package sge.legacy.subaccount.v1beta;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sge/legacy/bet/v1beta/tx.proto";
import "sge/legacy/house/v1beta/tx.proto";
import "sge/legacy/subaccount/v1beta/balance.proto";
import "sge/legacy/subaccount/v1beta/params.proto";

option go_package = "github.com/sge-network/sge/x/legacy/subaccount/types";

// Msg defines the Msg service.
service Msg {
  // Create defines a method for creating a subaccount.
  rpc Create(MsgCreate) returns (MsgCreateResponse) {
    option deprecated = true;
  }

  // TopUp defines a method for topping up a subaccount.
  rpc TopUp(MsgTopUp) returns (MsgTopUpResponse) { option deprecated = true; }

  // WithdrawUnlockedBalances defines a method for withdrawing unlocked
  // balances.
  rpc WithdrawUnlockedBalances(MsgWithdrawUnlockedBalances)
      returns (MsgWithdrawUnlockedBalancesResponse) {
    option deprecated = true;
  }

  // PlaceBet defines a method for placing a bet using a subaccount.
  rpc Wager(MsgWager) returns (MsgWagerResponse) { option deprecated = true; }

  // HouseDeposit defines a method for depositing funds to provide liquidity to
  // a market.
  rpc HouseDeposit(MsgHouseDeposit) returns (MsgHouseDepositResponse) {
    option deprecated = true;
  }

  // HouseWithdraw defines a method for withdrawing funds from a market.
  rpc HouseWithdraw(MsgHouseWithdraw) returns (MsgHouseWithdrawResponse) {
    option deprecated = true;
  }

  // UpdateParams defines a governance operation for updating the x/subaccount
  // module parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (cosmos_proto.method_added_in) = "sge-network 1.7.1";
    option deprecated = true;
  }
}

// MsgCreate defines the Msg/Create request type.
message MsgCreate {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the msg signer.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // owner is the owner of the subaccount.
  string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // locked_balances is the list of balance locks.
  // Fixme: why this attribute needs to be repeated?
  repeated LockedBalance locked_balances = 3 [ (gogoproto.nullable) = false ];
}

// MsgCreateAccountResponse defines the Msg/CreateAccount response type.
message MsgCreateResponse {}

// MsgTopUp defines the Msg/TopUp request type.
message MsgTopUp {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the msg signer.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // address is the subaccount address.
  string address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // locked_balances is the list of balance locks.
  // Fixme: Are we sending multiple balance update together? If not, then only
  // locked balance should be enough
  repeated LockedBalance locked_balances = 3 [ (gogoproto.nullable) = false ];
}

// MsgTopUpResponse defines the Msg/TopUp response type.
message MsgTopUpResponse {}

// MsgWithdrawUnlockedBalances defines the Msg/WithdrawUnlockedBalances request
// type.
message MsgWithdrawUnlockedBalances {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the subaccount owner.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgWithdrawUnlockedBalancesResponse defines the Msg/WithdrawUnlockedBalances
// response type.
message MsgWithdrawUnlockedBalancesResponse {}

// MsgWager wraps the MsgWager message. We need it in order not to have
// double interface registration conflicts.
message MsgWager {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the subaccount owner.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // ticket is the jwt ticket data.
  string ticket = 2;
}

// MsgWagerResponse wraps the MsgWagerResponse message. We need it in order not
// to have double interface registration conflicts.
message MsgWagerResponse {
  sge.legacy.bet.v1beta.MsgWagerResponse response = 1;
}

// MsgHouseDeposit wraps the MsgHouseDeposit message. We need it in order not to
// have double interface registration conflicts.
message MsgHouseDeposit { sge.legacy.house.v1beta.MsgDeposit msg = 1; }

// MsgHouseDepositResponse wraps the MsgHouseDepositResponse message. We need it
// in order not to have double interface registration conflicts.
message MsgHouseDepositResponse {
  sge.legacy.house.v1beta.MsgDepositResponse response = 1;
}

// MsgHouseWithdraw wraps the MsgHouseWithdraw message. We need it in order not
// to have double interface registration conflicts.
message MsgHouseWithdraw { sge.legacy.house.v1beta.MsgWithdraw msg = 1; }

// MsgHouseWithdrawResponse wraps the MsgHouseWithdrawResponse message. We need
// it in order not to have double interface registration conflicts.
message MsgHouseWithdrawResponse {
  sge.legacy.house.v1beta.MsgWithdrawResponse response = 1;
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/bet parameters.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
}
