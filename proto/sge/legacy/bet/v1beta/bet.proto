syntax = "proto3";
package sge.legacy.bet.v1beta;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "sge/legacy/bet/v1beta/odds_type.proto";

option go_package = "github.com/sge-network/sge/x/legacy/bet/types";

// Bet is the transaction order placed by a bettor on a specific event and odd
message Bet {
  // uid is the universal unique identifier assigned to a bet.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // market_uid is the universal unique identifier of
  // the market on which the bet is placed.
  string market_uid = 2 [
    (gogoproto.customname) = "MarketUID",
    (gogoproto.jsontag) = "market_uid",
    json_name = "market_uid"
  ];

  // odds_uid is the universal unique identifier,
  // of the odds on which the bet is placed.
  string odds_uid = 3 [
    (gogoproto.customname) = "OddsUID",
    (gogoproto.jsontag) = "odds_uid",
    json_name = "odds_uid"
  ];

  // odds_value is the odds on which the bet is placed.
  string odds_value = 5;

  // amount is the wager amount.
  string amount = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // fee is the betting fee user needs to pay for placing a bet
  string fee = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // status is the status of the bet, such as `unspecified` or `settled`.
  Status status = 8;

  // result is the result of the bet, such as `won` or `lost`.
  Result result = 9;

  // creator is the bettor address.
  string creator = 10 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // created_at is the bet placement timestamp.
  int64 created_at = 11;

  // settlement_height is the block height at which the bet is settled.
  int64 settlement_height = 12;

  // max_loss_multiplier is the multiplier coefficient of max loss.
  string max_loss_multiplier = 13 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // bet_fulfillment is the fulfillment data.
  repeated BetFulfillment bet_fulfillment = 14;

  // meta is metadata for bet
  MetaData meta = 15 [ (gogoproto.nullable) = false ];

  // Status of the Bet.
  enum Status {
    // the invalid or unknown
    STATUS_UNSPECIFIED = 0;
    // bet is placed
    STATUS_PLACED = 1;
    // bet is canceled by Bettor
    STATUS_CANCELED = 2;
    // bet is aborted
    STATUS_ABORTED = 3;
    // bet is pending for getting placed
    STATUS_PENDING = 4;
    // bet result is declared
    STATUS_RESULT_DECLARED = 5;
    // the bet is settled
    STATUS_SETTLED = 6;
  }

  // Result of the bet.
  enum Result {
    // the invalid or unknown
    RESULT_UNSPECIFIED = 0;
    // bet result is pending
    RESULT_PENDING = 1;
    // bet won by the bettor
    RESULT_WON = 2;
    // bet lost by the bettor
    RESULT_LOST = 3;
    // bet is refunded
    RESULT_REFUNDED = 4;
  }
}

// UID2ID is the type for mapping UIDs and Sequential IDs of bets.
message UID2ID {
  // uid is the universal unique identifier assigned to the bet.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];

  // id is an autogenerated sequential id for a bet.
  uint64 id = 2 [
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag) = "id",
    json_name = "id"
  ];
}

// PendingBet is the type for an unsettled bet
message PendingBet {
  // uid is the universal unique identifier for the bet.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // creator is the bettor address.
  string creator = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// SettledBet is the type for a settled bet.
message SettledBet {
  // uid is the universal unique identifier for the bet.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // bettor_address is the bech32 address of the bettor account.
  string bettor_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// BetFulfillment: A bet can be fulfilled by multiple users participating as a
// house Every participant is exposed to a share of risk or payout associated
// with the bet For the risk exposure on a bet, an estimated bet amount is also
// allocated to the participant This bet amount is the amount participant
// receive if the bettor loose the bet
message BetFulfillment {
  // participant_address is the bech32-encoded address of the participant
  // fulfilling bet.
  string participant_address = 1
      [ (gogoproto.moretags) = "yaml:\"participant_address\"" ];
  // participation_index is the index in initial participation queue index
  uint64 participation_index = 2
      [ (gogoproto.moretags) = "yaml:\"participation_index\"" ];
  // bet amount fulfilled by the participation
  string bet_amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"bet_amount\""
  ];
  // payout_profit is the fulfilled profit by the participation.
  string payout_profit = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"payout_profit\""
  ];
}

// metadata for bet
message MetaData {
  // selected_odds_type is metadata for bet
  sge.legacy.bet.v1beta.OddsType selected_odds_type = 1;
  // selected_odds_value is metadata for bet
  string selected_odds_value = 2;
  // is_main_market will tell weather the bet placed on the main market or not
  bool is_main_market = 3;
}
