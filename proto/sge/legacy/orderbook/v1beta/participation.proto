syntax = "proto3";
package sge.legacy.orderbook.v1beta;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/sge-network/sge/x/legacy/orderbook/types";

// OrderBookParticipation represents the participants of an order book.
message OrderBookParticipation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  // index is the index of the participation in the participation queue.
  uint64 index = 1 [ (gogoproto.moretags) = "yaml:\"index\"" ];

  // order_book_uid is the unique identifier corresponding to the order book.
  string order_book_uid = 2 [
    (gogoproto.customname) = "OrderBookUID",
    (gogoproto.jsontag) = "order_book_uid",
    json_name = "order_book_uid"
  ];

  // participant_address is the bech32-encoded address of the participant.
  string participant_address = 3 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.moretags) = "yaml:\"participant_address\""
  ];

  // liquidity is the total initial liquidity provided.
  string liquidity = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"liquidity\""
  ];

  // fee is the amount of fee to be paid if participation happens.
  string fee = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"fee\""
  ];

  // current_round_liquidity is the liquidity provided for the current round.
  string current_round_liquidity = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"current_round_liquidity\""
  ];

  // exposures_not_filled represents if all of the exposures of the
  // participation are filled or not.
  uint64 exposures_not_filled = 7
      [ (gogoproto.moretags) = "yaml:\"exposures_not_filled\"" ];

  // total_bet_amount is the total bet amount corresponding to all exposures.
  string total_bet_amount = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"total_bet_amount\""
  ];

  // current_round_total_bet_amount is the total bet amount corresponding to all
  // exposures in the current round.
  string current_round_total_bet_amount = 9 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"current_round_total_bet_amount\""
  ];

  // max_loss is the total bet amount corresponding to all exposure.
  string max_loss = 10 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_loss\""
  ];

  // current_round_max_loss is the current round max loss.
  string current_round_max_loss = 11 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"current_round_max_loss\""
  ];

  // current_round_max_loss_odds_uid is the total max loss corresponding to
  // all exposures.
  string current_round_max_loss_odds_uid = 12 [
    (gogoproto.customname) = "CurrentRoundMaxLossOddsUID",
    (gogoproto.jsontag) = "current_round_max_loss_odds_uid",
    json_name = "current_round_max_loss_odds_uid",
    (gogoproto.moretags) = "yaml:\"current_round_max_loss_odds_uid\""
  ];

  // actual_profit is the actual profit of the participation fulfillment.
  string actual_profit = 13 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"actual_profit\""
  ];

  // is_settled represents if the participation is settled or not.
  bool is_settled = 14 [ (gogoproto.moretags) = "yaml:\"is_settled\"" ];

  // returned_amount is the total returned amount to the user's account
  // including reimbursed fees.
  string returned_amount = 15 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"returned_amount\""
  ];

  // reimbursed_fee is the fee reimbursed because of reasons such as market
  // calcellation.
  string reimbursed_fee = 16 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"reimbursed_fee\""
  ];
}

// ParticipationBetPair represents the book participation and bet bond.
message ParticipationBetPair {
  // order_book_uid is the unique identifier corresponding to the order book
  string order_book_uid = 1 [
    (gogoproto.customname) = "OrderBookUID",
    (gogoproto.jsontag) = "order_book_uid",
    json_name = "order_book_uid"
  ];

  // participation_index is the index of participation corresponding to the bet
  // fulfillment.
  uint64 participation_index = 2
      [ (gogoproto.moretags) = "yaml:\"participation_index\"" ];

  // bet_uid is the bet universal unique identifier of the bet that is
  // fulfilled.
  string bet_uid = 3 [
    (gogoproto.customname) = "BetUID",
    (gogoproto.jsontag) = "bet_uid",
    json_name = "bet_uid"
  ];
}

// SettledOrderbookParticipation is the type for a settled orderbook
// participation.
message SettledOrderbookParticipation {
  // index is the index of the participation in the participation queue.
  uint64 index = 1 [ (gogoproto.moretags) = "yaml:\"index\"" ];

  // order_book_uid is the unique identifier corresponding to the order book.
  string order_book_uid = 2 [
    (gogoproto.customname) = "OrderBookUID",
    (gogoproto.jsontag) = "order_book_uid",
    json_name = "order_book_uid"
  ];

  // participant_address is the bech32-encoded address of the participant.
  string participant_address = 3 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.moretags) = "yaml:\"participant_address\""
  ];
}